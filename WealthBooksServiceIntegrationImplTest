@RunWith(PowerMockRunner.class)
@PrepareForTest({ HttpClientBuilder.class })
public class WealthBooksServiceIntegrationImplTest {

    @InjectMocks
    private WealthBooksServiceIntegrationImpl service;

    @Mock
    private CloseableHttpClient mockHttpClient;

    @Mock
    private CloseableHttpResponse mockResponse;

    @Mock
    private StatusLine mockStatusLine;

    @Mock
    private HttpEntity mockHttpEntity;

    private JSONObject requestJson;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(HttpClientBuilder.class);

        HttpClientBuilder builderMock = mock(HttpClientBuilder.class);
        when(HttpClientBuilder.create()).thenReturn(builderMock);
        when(builderMock.build()).thenReturn(mockHttpClient);

        requestJson = new JSONObject();
        requestJson.put("key", "value");
    }

    @Test
    public void testSendTopNavigationJson_success() throws Exception {
        when(mockHttpClient.execute(any(HttpPost.class))).thenReturn(mockResponse);
        when(mockResponse.getStatusLine()).thenReturn(mockStatusLine);
        when(mockStatusLine.getStatusCode()).thenReturn(200);
        when(mockResponse.getEntity()).thenReturn(mockHttpEntity);
        when(EntityUtils.toString(mockHttpEntity)).thenReturn("{\"response\": \"success\"}");

        CloseableHttpResponse result = service.sendTopNavigationJson(requestJson);
        assertNotNull(result);
    }

    @Test
    public void testSendTopNavigationJson_exception() throws Exception {
        when(mockHttpClient.execute(any(HttpPost.class))).thenThrow(new IOException("Simulated IO Exception"));

        CloseableHttpResponse result = service.sendTopNavigationJson(requestJson);
        assertNull(result);
    }
}
