@RunWith(MockitoJUnitRunner.class)
public class WealthBooksServiceIntegrationImplTest {

    private WealthBooksServiceIntegrationImpl service;

    @Spy
    private CloseableHttpClient spyClient = HttpClientBuilder.create().build();

    @Mock
    private CloseableHttpResponse mockResponse;

    @Mock
    private StatusLine mockStatusLine;

    @Mock
    private HttpEntity mockEntity;

    @Before
    public void setUp() throws Exception {
        // Use a real instance of the class under test
        service = new WealthBooksServiceIntegrationImpl();

        // Use reflection to inject our spyClient
        Field clientField = WealthBooksServiceIntegrationImpl.class.getDeclaredField("httpClient");
        clientField.setAccessible(true);
        clientField.set(service, spyClient);
    }

    @Test
    public void testSendTopNavigationJson_success() throws Exception {
        JSONObject json = new JSONObject();
        json.put("key", "value");

        doReturn(mockResponse).when(spyClient).execute(any(HttpPost.class));
        when(mockResponse.getStatusLine()).thenReturn(mockStatusLine);
        when(mockStatusLine.getStatusCode()).thenReturn(200);
        when(mockResponse.getEntity()).thenReturn(mockEntity);
        when(EntityUtils.toString(mockEntity)).thenReturn("{\"message\":\"ok\"}");

        CloseableHttpResponse result = service.sendTopNavigationJson(json);

        assertNotNull(result);
        verify(spyClient, times(1)).execute(any(HttpPost.class));
    }

    @Test
    public void testSendTopNavigationJson_exception() throws Exception {
        JSONObject json = new JSONObject();
        json.put("key", "value");

        doThrow(new IOException("Forced error")).when(spyClient).execute(any(HttpPost.class));

        CloseableHttpResponse result = service.sendTopNavigationJson(json);

        assertNull(result); // since catch block returns null
    }
}
