@Component(service = Servlet.class, property = {
    "sling.servlet.paths=/bin/wm3dr/getTableFile",
    "sling.servlet.methods=get"
})
public class GetTableFile extends SlingAllMethodsServlet {

    private static final long serialVersionUID = 1L;

    @Reference
    private ResourceResolverFactory resourceResolverFactory;

    private static final Logger LOGGER = LoggerFactory.getLogger(GetTableFile.class);

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response)
            throws ServletException, IOException {

        LOGGER.debug("******* GetTableFile Servlet Initialized ********");

        // Retrieve request parameters
        String path = request.getParameter("path");
        LOGGER.debug("Requested JCR path: {}", path);

        if (path == null || path.isEmpty()) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\":\"Path parameter is missing or invalid\"}");
            return;
        }

        // Initialize ResourceResolver
        Map<String, Object> params = new HashMap<>();
        params.put(ResourceResolverFactory.SUBSERVICE, "readSystem");

        try (ResourceResolver resourceResolver = resourceResolverFactory.getServiceResourceResolver(params)) {
            // Fetch the resource from JCR
            Resource resource = resourceResolver.getResource(path);
            if (resource == null) {
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                response.getWriter().write("{\"error\":\"Resource not found at path: " + path + "\"}");
                return;
            }

            // Convert file content to JSON format
            ValueMap properties = resource.adaptTo(ValueMap.class);
            if (properties != null) {
                Map<String, Object> jsonMap = new HashMap<>();
                properties.forEach(jsonMap::put);

                // Write JSON to the response
                response.setContentType("application/json");
                response.setCharacterEncoding("UTF-8");
                response.getWriter().write(new ObjectMapper().writeValueAsString(jsonMap));
                LOGGER.debug("JSON response sent successfully.");
            } else {
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                response.getWriter().write("{\"error\":\"Unable to adapt resource to ValueMap\"}");
            }
        } catch (Exception e) {
            LOGGER.error("Error occurred while processing the request: ", e);
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\":\"An unexpected error occurred\"}");
        }
    }
}


<sly data-sly-test="${tableManualVal.localRunMode == 'auth'}">
    <div class="downloadTable">
        <sly data-sly-use.jsonContent="${'java.net.URL' @ args='/bin/wm3dr/getTableFile?path=' + tableManualVal.path}">
        </sly>
        <pre>${jsonContent.openStream() @ context='json'}</pre>
    </div>
</sly>





