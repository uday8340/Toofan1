Approach 1: Using @Exporter Annotation (Recommended)

@Model(adaptables = Resource.class, adapters = {MyComponent.class, ComponentExporter.class}, resourceType = "myproject/components/content/mycomponent")
@Exporter(name = "jackson", extensions = "json")
public class MyComponent implements ComponentExporter {

    @Inject
    private String title;

    public String getTitle() {
        return title;
    }

    @Override
    public String getExportedType() {
        return "myproject/components/content/mycomponent";
    }
}

Approach 2: Custom URL Mapping (Via Servlet/Filter)
  
@Component(service = {Servlet.class}, 
           property = {
               "sling.servlet.paths=/bin/mycustomurl",
               "sling.servlet.extensions=json",
               "sling.servlet.methods=GET"
           })
public class MyCustomUrlServlet extends SlingSafeMethodsServlet {

    @Reference
    private ResourceResolverFactory resolverFactory;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        ResourceResolver resolver = request.getResourceResolver();
        Resource resource = resolver.getResource("/content/my-site/my-page/jcr:content/root/mycomponent");

        if (resource != null) {
            ComponentExporter exporter = resource.adaptTo(ComponentExporter.class);
            if (exporter != null) {
                String jsonOutput = new ObjectMapper().writeValueAsString(exporter);
                response.setContentType("application/json");
                response.getWriter().write(jsonOutput);
            }
        }
    }
}




@Component(service = {Servlet.class},
        property = {
                "sling.servlet.paths=/bin/simplejson",
                "sling.servlet.extensions=json",
                "sling.servlet.methods=GET"
        })
public class SimpleJsonServlet extends SlingSafeMethodsServlet {

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        Resource resource = request.getResourceResolver().getResource("/content/my-site/my-page/jcr:content/root/mycomponent");

        if (resource != null) {
            ValueMap properties = resource.getValueMap();
            Map<String, Object> jsonResponse = new HashMap<>(properties);

            response.setContentType("application/json");
            response.getWriter().write(new ObjectMapper().writeValueAsString(jsonResponse)); // Using Jackson
        } else {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\":\"Resource not found\"}");
        }
    }
}


@Component(service = {Servlet.class}, 
           property = {
               "sling.servlet.paths=/bin/mycustomurl",
               "sling.servlet.extensions=json",
               "sling.servlet.methods=GET"
           })
public class MyCustomUrlServlet extends SlingSafeMethodsServlet {

    @Reference
    private ResourceResolverFactory resolverFactory;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {
        ResourceResolver resolver = request.getResourceResolver();
        Resource resource = resolver.getResource("/content/my-site/my-page/jcr:content/root/mycomponent");

        if (resource != null) {
            try {
                ComponentExporter exporter = resource.adaptTo(ComponentExporter.class);
                if (exporter != null) {
                    String jsonOutput = new ObjectMapper().writeValueAsString(exporter);
                    response.setContentType("application/json");
                    response.getWriter().write(jsonOutput);
                } else {
                    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                    response.getWriter().write("{\"error\":\"Component adaptation failed\"}");
                }
            } catch (Exception e) {
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                response.getWriter().write("{\"error\":\"An error occurred\"}");
            }
        } else {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\":\"Resource not found\"}");
        }
    }

workfloe Servlet

package com.example.core.servlets;

import com.adobe.granite.ui.components.Config;
import com.adobe.granite.ui.components.JsonItem;
import com.adobe.granite.ui.components.Tag;
import com.google.gson.Gson;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.models.factory.ModelFactory;
import org.apache.sling.models.factory.MissingElementsException;
import org.apache.sling.models.factory.PostConstructException;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import javax.servlet.Servlet;
import javax.servlet.ServletException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

@Component(
    service = Servlet.class,
    property = {
        "sling.servlet.paths=/bin/wealthbook/export",
        "sling.servlet.methods=GET"
    }
)
public class WealthbookJsonExportServlet extends SlingAllMethodsServlet {

    @Reference
    private ModelFactory modelFactory;

    private static final Gson GSON = new Gson();

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        String resourcePath = request.getParameter("path");
        if (resourcePath == null || resourcePath.isEmpty()) {
            response.setStatus(SlingHttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\": \"Missing 'path' parameter\"}");
            return;
        }

        Map<String, Object> jsonResponse = new HashMap<>();
        try {
            request.getRequestDispatcher(resourcePath).include(request, response);
            Object componentModel = modelFactory.createModel(request.getResource(), Object.class);

            jsonResponse.put("path", resourcePath);
            jsonResponse.put("data", componentModel);

            response.getWriter().write(GSON.toJson(jsonResponse));

        } catch (PostConstructException | MissingElementsException e) {
            response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Failed to export component\"}");
        }
    }
}

}


