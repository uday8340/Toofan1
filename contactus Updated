package com.ms.wmrsicms.core.mygio.services.microsites;

import com.ms.wmrsicms.core.microsites.slingmodels.CardModel;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.Arrays;
import java.util.Collections;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

@RunWith(PowerMockRunner.class)
public class CardModelTest {

    @InjectMocks
    private CardModel cardModel;

    @Mock
    private Resource resource;

    @Mock
    private Resource subsectionResource;

    @Mock
    private Resource child1;

    @Mock
    private Resource child2;

    @Mock
    private ValueMap valueMap;

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
        cardModel = new CardModel();
        cardModel.resource = resource;
    }

    @Test
    public void testInit() {
        setupMocks("Test Title", "blue", Arrays.asList(child1, child2));
        
        cardModel.init();

        assertEquals("Test Title", cardModel.getTitle());
        assertEquals("blue", cardModel.getBackgroundcolor());
        assertEquals(2, cardModel.getSubsection().size());
    }

    @Test
    public void testInitWithNoSubsections() {
        setupMocks("Test Title", "blue", Collections.emptyList());

        cardModel.init();

        assertEquals("Test Title", cardModel.getTitle());
        assertEquals("blue", cardModel.getBackgroundcolor());
        assertTrue(cardModel.getSubsection().isEmpty());
    }

    @Test
    public void testInitWithNullResource() {
        cardModel.resource = null;
        cardModel.init();

        assertEquals(null, cardModel.getTitle());
        assertEquals(null, cardModel.getBackgroundcolor());
        assertTrue(cardModel.getSubsection().isEmpty());
    }

    private void setupMocks(String title, String backgroundcolor, java.util.List<Resource> children) {
        when(resource.adaptTo(ValueMap.class)).thenReturn(valueMap);
        when(valueMap.get("title", String.class)).thenReturn(title);
        when(valueMap.get("backgroundcolor", String.class)).thenReturn(backgroundcolor);

        when(resource.getChild("subsection")).thenReturn(subsectionResource);
        when(subsectionResource.getChildren()).thenReturn(children);

        for (Resource child : children) {
            when(child.adaptTo(CardModel.Subsection.class)).thenReturn(new CardModel.Subsection());
        }
    }
}
