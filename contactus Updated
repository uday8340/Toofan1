package com.ns.wmrsicms.core.microsites.slingmodels;

import com.ns.wmrsicms.core.microsites.slingmodels.ReportListModel.Link;
import com.ns.wmrsicms.core.microsites.slingmodels.ReportListModel.Report;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.when;

@RunWith(PowerMockRunner.class)
public class ReportListModelTest {

    @InjectMocks
    private ReportListModel reportListModel;

    @Mock
    private Resource resource;

    @Mock
    private ValueMap valueMap;

    @Mock
    private Resource linkResource;

    @Mock
    private Resource reportResource;

    @Mock
    private Resource linkChildResource;

    @Mock
    private Resource reportChildResource;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        reportListModel = new ReportListModel();
    }

    @Test
    public void testGettersAndSetters() {
        // Mock ValueMap properties
        when(resource.adaptTo(ValueMap.class)).thenReturn(valueMap);
        when(valueMap.get("backgroundColor", String.class)).thenReturn("blue");
        when(valueMap.get("iconPath", String.class)).thenReturn("/path/to/icon");
        when(valueMap.get("title", String.class)).thenReturn("Test Title");
        when(valueMap.get("hideBottomBorder", String.class)).thenReturn("true");
        when(valueMap.get("hideSource", String.class)).thenReturn("false");
        when(valueMap.get("hideEmail", String.class)).thenReturn("false");
        when(valueMap.get("linkTitle", String.class)).thenReturn("Test Link Title");
        when(valueMap.get("linkUrl", String.class)).thenReturn("/link/url");
        when(valueMap.get("isExternal", String.class)).thenReturn("false");
        when(valueMap.get("internalUseOnly", String.class)).thenReturn("false");

        // Set the resource
        reportListModel = resource.adaptTo(ReportListModel.class);

        // Test getters
        assertEquals("blue", reportListModel.getBackgroundColor());
        assertEquals("/path/to/icon", reportListModel.getIconPath());
        assertEquals("Test Title", reportListModel.getTitle());
        assertEquals("true", reportListModel.getHideBottomBorder());
        assertEquals("false", reportListModel.getHideSource());
        assertEquals("false", reportListModel.getHideEmail());
        assertEquals("Test Link Title", reportListModel.getLinkTitle());
        assertEquals("/link/url", reportListModel.getLinkUrl());
        assertEquals("false", reportListModel.getIsExternal());
        assertEquals("false", reportListModel.getInternalUseOnly());
    }

    @Test
    public void testLinkModel() {
        // Mocking a single Link model
        when(resource.getChild("links")).thenReturn(linkResource);
        when(linkResource.adaptTo(Link.class)).thenReturn(new Link());

        Link link = new Link();
        link.setTitle("Link Title");
        link.setPath("/content/link");
        link.setExternal(true);

        assertEquals("Link Title", link.getTitle());
        assertEquals("/content/link", link.getPath());
        assertTrue(link.isExternal());
    }

    @Test
    public void testReportModelWithLinks() {
        // Mocking a Report model with child Links
        when(resource.getChild("reports")).thenReturn(reportResource);
        when(reportResource.adaptTo(Report.class)).thenReturn(new Report());

        Report report = new Report();
        report.setReportId("report-id-123");

        Link link = new Link();
        link.setTitle("Report Link Title");
        link.setPath("/content/report/link");
        link.setExternal(false);

        report.setLinks(Collections.singletonList(link));

        assertEquals("report-id-123", report.getReportId());
        assertEquals(1, report.getLinks().size());
        assertEquals("Report Link Title", report.getLinks().get(0).getTitle());
        assertEquals("/content/report/link", report.getLinks().get(0).getPath());
        assertFalse(report.getLinks().get(0).isExternal());
    }

    @Test
    public void testEmptyReportsAndLinks() {
        // Testing when reports and links are not available
        when(resource.getChild("reports")).thenReturn(null);
        when(resource.getChild("links")).thenReturn(null);

        assertNull(reportListModel.getReports());
        assertNull(reportListModel.getLinks());
    }

    @Test
    public void testMultipleReportsAndLinks() {
        // Mocking multiple Reports and Links
        when(resource.getChild("reports")).thenReturn(reportResource);
        when(reportResource.getChildren()).thenReturn(Arrays.asList(reportChildResource));
        when(reportChildResource.adaptTo(Report.class)).thenReturn(new Report());

        Report report = new Report();
        report.setReportId("report-id-1");

        Link link1 = new Link();
        link1.setTitle("Link 1");
        link1.setPath("/content/report/link1");
        link1.setExternal(false);

        Link link2 = new Link();
        link2.setTitle("Link 2");
        link2.setPath("/content/report/link2");
        link2.setExternal(true);

        report.setLinks(Arrays.asList(link1, link2));

        when(reportChildResource.adaptTo(Report.class)).thenReturn(report);
        reportListModel.setReports(Arrays.asList(report));

        List<Report> reports = reportListModel.getReports();
        assertNotNull(reports);
        assertEquals(1, reports.size());
        assertEquals("report-id-1", reports.get(0).getReportId());
        assertEquals(2, reports.get(0).getLinks().size());
    }
}


(function(document, $) {
    "use strict";

    $(document).on("dialog-ready", function() {
        // Target the MSID text field by the custom class added
        $(".uppercase-text").on("input", function() {
            this.value = this.value.toUpperCase();
        });
    });
})(document, Granite.$);

    });
})(document, Granite.$, Coral);

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

/* global jQuery, Coral */
(function($, Coral) {
    "use strict";

    console.log(" --------CLIENTLIBS LOADED------- ");

    
    registry.register("foundation.validation.validator", {
        selector: "[data-validation=geeks-firstname-validation]",
        validate: function(element) {
            let el = $(element);
            let pattern=/[0-9a-z]/;
            let value=el.val();
            if(pattern.test(value)){
               return "Please add only Upper Case Letters in First name";
            }

        }
    });

   
})(jQuery, Coral);


...................
var character = '5';if (character == character.toUpperCase()) {
 alert ('upper case true');
}if (character == character.toLowerCase()){
 alert ('lower case true');
}
<input oninput="this.value = this.value.toUpperCase()" />


$(function() {
    $('input').keyup(function() {
        this.value = this.value.toLocaleUpperCase();
    });
});

listeners="{
                'render': function(cmp) {
                    cmp.el.down('input').on('input', function() {
                        this.value = this.value.toUpperCase();
                    });
                }
            }"



/* global jQuery, Coral */
(function($, Coral) {
    "use strict";

    console.log(" --------CLIENTLIBS LOADED------- ");

    var registry = $(window).adaptTo("foundation-registry");

    // Validator for required for multifield max and min items
    registry.register("foundation.validation.validator", {
        selector: "[data-validation=geeks-multifield]",
        validate: function(element) {
            var el = $(element);
            let max=el.data("max-items");
            let min=el.data("min-items");
            let items=el.children("coral-multifield-item").length;
            let domitems=el.children("coral-multifield-item");
            console.log("{} : {} :{} ",max,min,items);
            if(items>max){
              /* Use below line if you don't want to add item in multifield more than max limit */
              //domitems.last().remove();
              return "You can add maximum "+max+" books. You are trying to add "+items+"th book."
            }
            if(items<min){
                return "You add minimum "+min+" books."
            }
        }
    });

    registry.register("foundation.validation.validator", {
        selector: "[data-validation=geeks-firstname-validation]",
        validate: function(element) {
            let el = $(element);
            let pattern=/[0-9a-z]/;
            let value=el.val();
            if(pattern.test(value)){
               return "Please add only Upper Case Letters in First name";
            }

        }
    });

   
})(jQuery, Coral);





$(document).on("dialog-ready", function() {
    $("input[name='./textField']").on("input", function() {
        $(this).val($(this).val().toUpperCase());
    });
});


..............................................................................

(function(document, $) {
    "use strict";

    // Convert MSID to uppercase as the user types
    $(document).on("dialog-ready", function() {
        $(".uppercase-text").on("input", function() {
            this.value = this.value.toUpperCase();
        });
    });

    // Custom validation for MSID
    $(window).adaptTo("foundation-registry").register("foundation.validation.validator", {
        selector: ".custom-msid-validation",  // Target input field with this class
        validate: function(el) {
            var value = el.value;

            // Example validation: MSID must be exactly 5 characters long
            if (value.length !== 5) {
                return "MSID must be exactly 5 characters long.";
            }

            // Example validation: MSID must contain only alphanumeric characters
            var regex = /^[A-Z0-9]+$/;  // Only uppercase letters and digits
            if (!regex.test(value)) {
                return "MSID must contain only uppercase letters and digits.";
            }
        }
    });
})(document, Granite.$);

......................................................................................

(function(document, $) {
    'use strict';
    
    $(document).on('foundation-contentloaded', function() {
        $('.convert-uppercase').on('input', function() {
            this.value = this.value.toUpperCase();
        });
    });
})(document, Granite.$);


....................................................................

(function ($, Granite) {
    "use strict";
 
    $(document).on("dialog-ready", function () {
        var msidField = $("input[name='./msid']");
        if (msidField.length > 0) {
            msidField.on("input", function () {
                var value = $(this).val();
                var validValue = value.replace(/[^A-Z0-9]/g, '');  // Allow only uppercase letters and numbers
                if (value !== validValue) {
                    $(this).val(validValue);  // Replace the invalid value with the valid one
                }
            });
        }
    });
})(jQuery, Granite);

...........................................................................................

$(document).ready(function() {

    addTooltipIfTruncatedLines('.analysts-heading');

    (function($, Coral) { 
        "use strict";

        console.log(" -CLIENTLIBS LOADED-------");

        var registry = $(window).adaptTo("foundation-registry");

        // Validator for required for multifield max and min items
        registry.register("foundation.validation.validator", { 
            selector: "[data-validation-geeks-multifield]",

            validate: function(element) {
                var el = $(element);
                let max = el.data("max-items");
                let min = el.data("min-items");
                let items = el.children("coral-multifield-item").length;
                let domitems = el.children("coral-multifield-item");

                console.log("Max: {}, Min: {}, Items: {}", max, min, items);

                // Use the below line if you don't want to add item in multifield more than max limit
                // domitems.last().remove();

                if (items > max) {
                    return "You can add a maximum of " + max + " books. You are trying to add the " + items + "th book.";
                }

                if (items < min) {
                    return "You need to add a minimum of " + min + " books.";
                }
            }
        });

        // Validator for first name validation (only uppercase letters)
        registry.register("foundation.validation.validator", { 
            selector: "[data-validation-geeks-firstname-validation]",

            validate: function(element) {
                let el = $(element);
                let pattern = /^[A-Z]+$/; // Uppercase letters only
                let value = el.val();

                if (!pattern.test(value)) {
                    return "Please add only Upper Case Letters in First name";
                }
            }
        });

    })(jQuery, Coral);

.....................................................................................

<input type="text" id="username" name="username"      pattern="[A-Z]*" title="Only uppercase letters" />

});
........................................................

let username = "nathan";let newUsername = username.toUpperCase();console.log(newUsername); // "NATHAN"

....................................................

<input type="text" id="fname" onkeyup="myFunction()">
 
function myFunction() {

  let x = document.getElementById("fname");

  x.value = x.value.toUpperCase();

}
 



