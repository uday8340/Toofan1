package com.ms.wmrsicms.core.mygio.services.microsites;

import com.ms.wmrsicms.core.microsites.slingmodels.CardModel;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.Arrays;
import java.util.Collections;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

@RunWith(PowerMockRunner.class)
public class CardModelTest {

    @InjectMocks
    private CardModel cardModel;

    @Mock
    private Resource resource;

    @Mock
    private Resource subsectionResource;

    @Mock
    private Resource child1;

    @Mock
    private Resource child2;

    @Mock
    private ValueMap valueMap;

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
        cardModel = new CardModel();
        cardModel.resource = resource;
    }

    @Test
    public void testInitWithValidData() {
        // Mock ValueMap
        when(resource.adaptTo(ValueMap.class)).thenReturn(valueMap);
        when(valueMap.get("title", String.class)).thenReturn("Test Title");
        when(valueMap.get("backgroundcolor", String.class)).thenReturn("blue");

        // Mock child resources
        when(resource.getChild("subsection")).thenReturn(subsectionResource);
        when(subsectionResource.getChildren()).thenReturn(Arrays.asList(child1, child2));

        // Mock Subsection objects
        CardModel.Subsection subsection1 = new CardModel.Subsection();
        CardModel.Subsection subsection2 = new CardModel.Subsection();
        when(child1.adaptTo(CardModel.Subsection.class)).thenReturn(subsection1);
        when(child2.adaptTo(CardModel.Subsection.class)).thenReturn(subsection2);

        cardModel.init();

        assertEquals("Test Title", cardModel.getTitle());
        assertEquals("blue", cardModel.getBackgroundcolor());
        assertEquals(2, cardModel.getSubsection().size());
    }

    @Test
    public void testInitWithNoSubsections() {
        // Mock ValueMap
        when(resource.adaptTo(ValueMap.class)).thenReturn(valueMap);
        when(valueMap.get("title", String.class)).thenReturn("Test Title");
        when(valueMap.get("backgroundcolor", String.class)).thenReturn("blue");

        // Mock resource without children
        when(resource.getChild("subsection")).thenReturn(subsectionResource);
        when(subsectionResource.getChildren()).thenReturn(Collections.emptyList());

        cardModel.init();

        assertEquals("Test Title", cardModel.getTitle());
        assertEquals("blue", cardModel.getBackgroundcolor());
        assertTrue(cardModel.getSubsection().isEmpty());
    }

    @Test
    public void testInitWithNullResource() {
        // Mock ValueMap
        when(resource.adaptTo(ValueMap.class)).thenReturn(valueMap);
        when(valueMap.get("title", String.class)).thenReturn(null);
        when(valueMap.get("backgroundcolor", String.class)).thenReturn(null);

        // Mock resource with null subsection
        when(resource.getChild("subsection")).thenReturn(null);

        cardModel.init();

        assertEquals(null, cardModel.getTitle());
        assertEquals(null, cardModel.getBackgroundcolor());
        assertTrue(cardModel.getSubsection().isEmpty());
    }

    @Test
    public void testSubsectionInitialization() {
        // Mock ValueMap
        when(resource.adaptTo(ValueMap.class)).thenReturn(valueMap);
        when(valueMap.get("title", String.class)).thenReturn("Test Title");
        when(valueMap.get("backgroundcolor", String.class)).thenReturn("blue");

        // Mock subsection resources
        when(resource.getChild("subsection")).thenReturn(subsectionResource);
        when(subsectionResource.getChildren()).thenReturn(Collections.singletonList(child1));

        // Mock a Subsection with links
        CardModel.Subsection subsection = new CardModel.Subsection();
        Resource linkResource = org.mockito.Mockito.mock(Resource.class);
        when(child1.adaptTo(CardModel.Subsection.class)).thenReturn(subsection);
        when(child1.getChild("links")).thenReturn(linkResource);
        when(linkResource.getChildren()).thenReturn(Collections.emptyList());

        cardModel.init();

        assertEquals("Test Title", cardModel.getTitle());
        assertEquals("blue", cardModel.getBackgroundcolor());
        assertEquals(1, cardModel.getSubsection().size());
        assertTrue(cardModel.getSubsection().get(0).getLinks().isEmpty());
    }
}
