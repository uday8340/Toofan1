package com.ms.wmrsicms.core.microsites.slingmodels;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(PowerMockRunner.class)
public class CardModelTest {

    @InjectMocks
    private CardModel cardModel;

    @Mock
    private Resource resource;

    @Mock
    private Resource childResource;

    @Mock
    private ValueMap valueMap;

    @Mock
    private Resource subsectionResource;

    @Mock
    private Resource linksResource;

    @Mock
    private CardModel.Subsection subsection;

    @Mock
    private CardModel.Link link;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testInit() {
        // Mocking the resource to have children
        when(resource.hasChildren()).thenReturn(true);
        when(resource.getChild("subsection")).thenReturn(subsectionResource);
        when(subsectionResource.getChildren()).thenReturn(createIterator(childResource));

        // Mocking childResource adaptation to Subsection
        when(childResource.adaptTo(CardModel.Subsection.class)).thenReturn(subsection);

        // Initializing the model
        cardModel.init();

        // Asserting the subsection list is populated correctly
        assertNotNull(cardModel.getSubsection());
        assertEquals(1, cardModel.getSubsection().size());
    }

    @Test
    public void testSubsectionInit() {
        CardModel.Subsection subsectionModel = new CardModel.Subsection();

        // Mocking the subsection resource to have children
        when(subsectionResource.getChild("links")).thenReturn(linksResource);
        when(linksResource.getChildren()).thenReturn(createIterator(childResource));

        // Mocking childResource adaptation to Link
        when(childResource.adaptTo(CardModel.Link.class)).thenReturn(link);

        // Injecting the resource
        subsectionModel.init();

        // Asserting the links list is populated correctly
        assertNotNull(subsectionModel.getLinks());
    }

    @Test
    public void testGetters() {
        // Mocking ValueMap
        when(resource.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("title", String.class)).thenReturn("Test Title");
        when(valueMap.get("iconImage", String.class)).thenReturn("Test Icon Image");
        when(valueMap.get("instructionText", String.class)).thenReturn("Test Instruction Text");
        when(valueMap.get("backgroundcolor", String.class)).thenReturn("Test Background Color");

        // Setting up fields manually as ValueMapValue injection won't work in unit tests
        cardModel = new CardModel();
        cardModel.init();
        
        // Setting field values
        cardModel.getClass().getDeclaredField("title").set(cardModel, "Test Title");
        cardModel.getClass().getDeclaredField("iconImage").set(cardModel, "Test Icon Image");
        cardModel.getClass().getDeclaredField("instructionText").set(cardModel, "Test Instruction Text");
        cardModel.getClass().getDeclaredField("backgroundcolor").set(cardModel, "Test Background Color");

        // Assertions for getters
        assertEquals("Test Title", cardModel.getTitle());
        assertEquals("Test Icon Image", cardModel.getIconImage());
        assertEquals("Test Instruction Text", cardModel.getInstructionText());
        assertEquals("Test Background Color", cardModel.getBackgroundcolor());
    }

    private Iterator<Resource> createIterator(Resource... resources) {
        List<Resource> resourceList = new ArrayList<>();
        for (Resource resource : resources) {
            resourceList.add(resource);
        }
        return resourceList.iterator();
    }
}
