package com.ms.wmrsicms.core.microsites.slingmodels;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.testing.mock.sling.junit5.SlingContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@ExtendWith(MockitoExtension.class)
class CardModelTest {

    // Mocked context
    private final SlingContext context = new SlingContext();

    @Mock
    private Resource resource;

    @InjectMocks
    private CardModel cardModel;

    @BeforeEach
    void setUp() {
        when(resource.getChild("subsection")).thenReturn(mock(Resource.class));
        when(resource.getChild("subsection").getChildren()).thenReturn(Collections.emptyList().iterator());

        cardModel = context.registerInjectActivateService(new CardModel());
        context.registerInjectActivateService(cardModel);
    }

    @Test
    void testGetTitle() {
        String title = "Sample Title";
        cardModel.title = title;

        assertEquals(title, cardModel.getTitle());
    }

    @Test
    void testGetIconImage() {
        String iconImage = "sample-icon.png";
        cardModel.iconImage = iconImage;

        assertEquals(iconImage, cardModel.getIconImage());
    }

    @Test
    void testGetInstructionText() {
        String instructionText = "Follow these instructions.";
        cardModel.instructionText = instructionText;

        assertEquals(instructionText, cardModel.getInstructionText());
    }

    @Test
    void testGetBackgroundcolor() {
        String backgroundcolor = "#FFFFFF";
        cardModel.backgroundcolor = backgroundcolor;

        assertEquals(backgroundcolor, cardModel.getBackgroundcolor());
    }

    @Test
    void testSubsectionInitialization() {
        Resource subsectionResource = mock(Resource.class);
        when(resource.getChild("subsection")).thenReturn(subsectionResource);
        when(subsectionResource.getChildren()).thenReturn(Collections.emptyList().iterator());

        cardModel.init();

        assertNotNull(cardModel.getSubsection());
        assertTrue(cardModel.getSubsection().isEmpty());
    }

    @Test
    void testSubsectionWithChildren() {
        Resource subsectionResource = mock(Resource.class);
        Resource childResource = mock(Resource.class);
        when(resource.getChild("subsection")).thenReturn(subsectionResource);
        when(subsectionResource.getChildren()).thenReturn(Collections.singletonList(childResource).iterator());

        Subsection mockSubsection = mock(Subsection.class);
        when(childResource.adaptTo(Subsection.class)).thenReturn(mockSubsection);

        cardModel.init();

        List<Subsection> subsections = cardModel.getSubsection();
        assertNotNull(subsections);
        assertEquals(1, subsections.size());
        assertEquals(mockSubsection, subsections.get(0));
    }

    @Test
    void testSubsectionGetters() {
        Subsection subsection = new Subsection();
        subsection.subheading = "Sample Subheading";
        subsection.description = "Sample Description";
        subsection.links = new ArrayList<>();
        subsection.isInlineLink = true;

        assertEquals("Sample Subheading", subsection.getSubheading());
        assertEquals("Sample Description", subsection.getDescription());
        assertNotNull(subsection.getLinks());
        assertTrue(subsection.isInlineLink());
    }

    @Test
    void testLinkGetters() {
        Link link = new Link();
        link.title = "Sample Link";
        link.path = "/content/sample";
        link.isExternal = true;

        assertEquals("Sample Link", link.getTitle());
        assertEquals("/content/sample", link.getPath());
        assertTrue(link.isExternal());
    }
}
