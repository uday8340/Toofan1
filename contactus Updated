package com.ms.wmrsicms.core.microsites.slingmodels;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

@RunWith(PowerMockRunner.class)
public class CardModelTest {

    @InjectMocks
    private CardModel cardModel;

    @Mock
    private Resource resource;

    @Mock
    private ValueMap valueMap;

    @Mock
    private Resource subsectionResource;

    @Mock
    private Resource linkResource;

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testInit() {
        // Mocking ValueMap to return expected values
        when(resource.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("title", String.class)).thenReturn("Test Title");
        when(valueMap.get("iconImage", String.class)).thenReturn("icon.png");
        when(valueMap.get("instructionText", String.class)).thenReturn("Instruction text");
        when(valueMap.get("backgroundcolor", String.class)).thenReturn("#FFFFFF");

        // Mocking the resource to have children for subsection
        when(resource.getChild("subsection")).thenReturn(subsectionResource);
        when(subsectionResource.hasChildren()).thenReturn(true);

        // Creating a list of subsection resources
        List<Resource> subsectionResourcesList = new ArrayList<>();
        subsectionResourcesList.add(subsectionResource);
        Iterator<Resource> subsectionIterator = subsectionResourcesList.iterator();
        when(subsectionResource.getChildren()).thenReturn(subsectionIterator);

        // Mocking subsection resource ValueMap
        when(subsectionResource.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("subheading", String.class)).thenReturn("Subheading");
        when(valueMap.get("description", String.class)).thenReturn("Subsection Description");

        // Mocking links inside subsection
        when(subsectionResource.getChild("links")).thenReturn(linkResource);
        when(linkResource.hasChildren()).thenReturn(true);

        // Creating a list of link resources
        List<Resource> linkResourcesList = new ArrayList<>();
        linkResourcesList.add(linkResource);
        Iterator<Resource> linkIterator = linkResourcesList.iterator();
        when(linkResource.getChildren()).thenReturn(linkIterator);

        // Mocking link resource ValueMap
        when(linkResource.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("title", String.class)).thenReturn("Link Title");
        when(valueMap.get("path", String.class)).thenReturn("/content/link");
        when(valueMap.get("isExternal", Boolean.class)).thenReturn(true);

        // Initialize the model
        cardModel.init();

        // Validate the title, iconImage, instructionText, and backgroundcolor
        assertEquals("Test Title", cardModel.getTitle());
        assertEquals("icon.png", cardModel.getIconImage());
        assertEquals("Instruction text", cardModel.getInstructionText());
        assertEquals("#FFFFFF", cardModel.getBackgroundcolor());

        // Validate subsection initialization
        List<CardModel.Subsection> subsections = cardModel.getSubsection();
        assertEquals(1, subsections.size());
        CardModel.Subsection subsection = subsections.get(0);
        assertEquals("Subheading", subsection.getSubheading());
        assertEquals("Subsection Description", subsection.getDescription());

        // Validate links within subsection
        List<CardModel.Subsection.Link> links = subsection.getLinks();
        assertEquals(1, links.size());
        CardModel.Subsection.Link link = links.get(0);
        assertEquals("Link Title", link.getTitle());
        assertEquals("/content/link", link.getPath());
        assertTrue(link.isExternal());
    }
}
