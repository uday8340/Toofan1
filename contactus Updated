 
@Model(adaptables = Resource.class)
public class ContactListModel {
 
    private static final Logger logger = LoggerFactory.getLogger(ContactListModel.class);
 
    @ValueMapValue
    private String layout;
 
    @ValueMapValue(name = "msid")
    @Default(values = "Default msid")
    private String msid;
 
    @ValueMapValue
    private String analystName;
 
    @ValueMapValue
    private String analystProfileUrl;
 
    @ValueMapValue
    private String analystEmail;
 
    @ValueMapValue
    private String analystNumber;
 
    @PostConstruct
    protected void init() {
logger.info("Initializing ContactListModel");
 
logger.info("Layout: {}", layout);
logger.info("MSID: {}", msid);
logger.info("Analyst Name: {}", analystName);
logger.info("Analyst Profile URL: {}", analystProfileUrl);
logger.info("Analyst Email: {}", analystEmail);
logger.info("Analyst Number: {}", analystNumber);
    }
 
    public String getLayout() {
        logger.debug("Getting layout: {}", layout);
        return layout;
    }
 
    public String getMsid() {
        logger.debug("Getting MSID: {}", msid);
        return msid;
    }
 
    public String getAnalystName() {
        logger.debug("Getting Analyst Name: {}", analystName);
        return analystName;
    }
 
    public String getAnalystProfileUrl() {
        logger.debug("Getting Analyst Profile URL: {}", analystProfileUrl);
        return analystProfileUrl;
    }
 
    public String getAnalystEmail() {
        logger.debug("Getting Analyst Email: {}", analystEmail);
        return analystEmail;
    }
 
    public String getAnalystNumber() {
        logger.debug("Getting Analyst Number: {}", analystNumber);
        return analystNumber;
    }
}





[12:55] Lad, Uday Ankush
package com.yourproject.core.models;
 
import org.apache.sling.models.annotations.Default;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.Via;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;
import org.apache.sling.models.annotations.injectorspecific.Inject;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
 
import javax.annotation.PostConstruct;
import java.util.List;
 
@Model(adaptables = SlingHttpServletRequest.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class ContactUsModel {
 
    private static final Logger logger = LoggerFactory.getLogger(ContactUsModel.class);
 
    @ValueMapValue(name = "heading")
    @Default(values = "Default heading")
    private String heading;
 
    @Inject
    @Via("resource")
    private List<ContactListModel> contactlist;
 
    @PostConstruct
    protected void init() {
        logger.info("Initializing ContactUsModel");
 
        if (heading != null) {
            logger.info("This is the heading: {}", heading);
        } else {
            logger.warn("Heading is null or empty.");
        }
 
        if (contactlist != null && !contactlist.isEmpty()) {
            logger.info("Contact List contains {} items.", contactlist.size());
        } else {
            logger.warn("Contact List is null or empty.");
        }
    }
 
    public String getHeading() {
        logger.debug("Getting heading: {}", heading);
        return heading;
    }
 
    public List<ContactListModel> getContactlist() {
        logger.debug("Getting contact list with {} items", contactlist != null ? contactlist.size() : 0);
        return contactlist;
    }
}
logger.info - logger Resources and Information.
logger.info is your first and best source for all of the information youâ€™re looking for. From general topics to more of what you would expect to find here, logger.info has it all. We hope you find ...
 
