(function($, $document) {
    "use strict";

    $document.on("foundation-contentloaded", function(e) {
        // Custom Email Validation
        $.validator.register({
            selector: "[data-validation='emailValidation']",
            validate: function(value) {
                // Basic email structure check (presence of @)
                var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

                // Check for special characters or spaces
                var invalidCharsPattern = /[^a-zA-Z0-9@._-]/;

                if (!emailPattern.test(value)) {
                    return "Invalid email syntax.";
                }

                if (invalidCharsPattern.test(value)) {
                    return "Email should not contain spaces or special characters.";
                }

                // Validate the domain (after @)
                var domainPart = value.split('@')[1];
                if (domainPart && domainPart.split('.').length < 2) {
                    return "Invalid domain name format.";
                }

                return null; // Valid email
            }
        });
    });

})(jQuery, jQuery(document));


........................

(function($, $document) {
    "use strict";

    $document.on("foundation-contentloaded", function(e) {
        // Custom Email Validation
        $.validator.register({
            selector: "[data-validation='emailValidation']",
            validate: function(value) {
                // Basic email structure check (presence of @ and a valid domain)
                var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

                // Check for special characters or spaces other than allowed
                var invalidCharsPattern = /[^a-zA-Z0-9@._-]/;

                // Validate the basic email structure
                if (!emailPattern.test(value)) {
                    return "Invalid email syntax. Please enter a valid email.";
                }

                // Check for invalid characters or spaces
                if (invalidCharsPattern.test(value)) {
                    return "Email should not contain spaces or invalid special characters.";
                }

                // Validate the domain part (after @)
                var domainPart = value.split('@')[1];
                if (domainPart && domainPart.split('.').length < 2) {
                    return "Invalid domain name format. Please enter a valid domain.";
                }

                return null; // Email is valid
            }
        });
    });

})(jQuery, jQuery(document));

<input type="text" data-validation="emailValidation" />

var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
............................

(function($, $document) {
    "use strict";

    $document.on("foundation-contentloaded", function(e) {
        // Custom Email Validation
        $.validator.register({
            selector: "[data-validation='emailValidation']",
            validate: function(value) {
                // Log the entered email value for debugging
                console.log("Entered email: ", value);

                // Check if value is empty
                if (!value) {
                    return "Email cannot be empty.";
                }

                // Basic email structure check (presence of @ and valid domain)
                var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

                // Check for special characters or spaces other than allowed
                var invalidCharsPattern = /[^a-zA-Z0-9@._-]/;

                // Check for invalid characters first
                if (invalidCharsPattern.test(value)) {
                    console.log("Invalid characters detected in email.");
                    return "Email should not contain spaces or invalid special characters.";
                }

                // Validate the basic email structure
                if (!emailPattern.test(value)) {
                    console.log("Email pattern doesn't match.");
                    return "Invalid email syntax. Please enter a valid email.";
                }

                // Validate the domain part (after @)
                var domainPart = value.split('@')[1];
                if (domainPart && domainPart.split('.').length < 2) {
                    console.log("Invalid domain name format.");
                    return "Invalid domain name format. Please enter a valid domain.";
                }

                // Email is valid
                console.log("Email is valid.");
                return null;
            }
        });
    });

})(jQuery, jQuery(document));


.....................


(function ($, window, document) {
    "use strict";

    // Register the custom validator using the registry
    var registry = $(window).adaptTo("foundation-registry");

    registry.register("foundation.validation.validator", {
        selector: "[data-validation='emailValidation']", // Target elements with this data attribute
        validate: function (el) {
            var value = el.val(); // Get the value of the field

            // Basic email pattern check (contains @ and valid domain)
            var emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

            // Check for spaces and invalid characters
            var invalidCharsPattern = /[\s!#$%^&*()+=\[\]{};':"\\|,<>\/?]/;

            // Check if the email value is valid
            if (!value || value.trim() === "") {
                return "Email is required."; // If empty, return this error message
            }

            // Invalid characters or spaces validation
            if (invalidCharsPattern.test(value)) {
                return "Email should not contain spaces or invalid special characters.";
            }

            // Basic syntax validation
            if (!emailPattern.test(value)) {
                return "Invalid email syntax. Please enter a valid email.";
            }

            // Extract the domain part after @ and check for valid domain format
            var domainPart = value.split("@")[1];
            if (domainPart && domainPart.split(".").length < 2) {
                return "Invalid domain name format.";
            }

            return null; // Return null if validation is successful (valid email)
        }
    });

    // Optional: Apply validation on content load
    $(document).on("foundation-contentloaded", function (e) {
        $(e.target).find("form").each(function () {
            Coral.commons.ready($(this), function () {
                $(this).adaptTo("foundation-validation").checkValidity();
            });
        });
    });

})(jQuery, window, document);
