package com.ms.wmrsicms.core.mygio.services;

import com.ms.wmrsicms.core.microsites.slingmodels.LandingPageModel;
import com.ms.wmrsicms.core.microsites.slingmodels.LandingPagePojo;
import com.ms.wmrsicms.core.common.Constants;
import com.ms.wmrsicms.core.services.CommonConfiguration;
import org.apache.jackrabbit.commons.JcrUtils;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.settings.SlingSettingsService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import javax.jcr.Node;
import java.util.*;

import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({JcrUtils.class})
public class LandingPageModelTest {

    @InjectMocks
    private LandingPageModel landingPageModel;

    @Mock
    private ResourceResolver resourceResolver;

    @Mock
    private SlingSettingsService slingSettingsService;

    @Mock
    private Page currentPage;

    @Mock
    private CommonConfiguration commonConfiguration;

    @Mock
    private Resource rsiMainRes;

    @Mock
    private Resource childRes;

    @Mock
    private Node jcrNode;

    @Mock
    private ValueMap valueMap;

    @Mock
    private Resource externalCardResource;

    @Mock
    private ValueMap externalCardResMap;

    private List<Resource> landingPageCards;

    private static final String RSI_PATH = "/content/wmrsi/microsites/gio-offerings";
    private static final String MICROSITE_LANDING_TEMPLATE = "wmrsicms/components/page/micrositeblankpage";

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(JcrUtils.class);
    }

    @Test
    public void testInit_withValidData() {
        try {
            when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);

            List<Resource> list = new ArrayList<>();
            list.add(childRes);
            Iterator<Resource> itr = list.iterator();
            when(rsiMainRes.listChildren()).thenReturn(itr);
            when(childRes.getValueMap()).thenReturn(valueMap);
            when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
            when(childRes.getPath()).thenReturn("/content/wmrsi/landing-page");
            when(resourceResolver.resolve(childRes.getPath() + "/jcr:content")).thenReturn(rsiMainRes);
            when(rsiMainRes.adaptTo(Node.class)).thenReturn(jcrNode);
            when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", "")).thenReturn(MICROSITE_LANDING_TEMPLATE);
            when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
            when(JcrUtils.getStringProperty(jcrNode, "jcr:title", "")).thenReturn("Landing Page");
            when(JcrUtils.getStringProperty(jcrNode, "cardDescription", "")).thenReturn("Sample description");
            when(JcrUtils.getStringProperty(jcrNode, "cardimage", "")).thenReturn("/content/dam/microsites/img1.jpeg");
            when(JcrUtils.getStringProperty(jcrNode, "LinkText", "Explore Now")).thenReturn("Explore Now");
            when(JcrUtils.getStringProperty(jcrNode, "Linkwindowtype", "self")).thenReturn("self");
            when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0")).thenReturn("1");

            Set<String> runModes = new HashSet<>(Collections.singletonList("author"));
            when(slingSettingsService.getRunModes()).thenReturn(runModes);

            landingPageCards = new ArrayList<>();
            landingPageCards.add(externalCardResource);
            landingPageModel.setLandingPageCards(landingPageCards);

            when(externalCardResource.getValueMap()).thenReturn(externalCardResMap);
            when(externalCardResMap.getOrDefault("isActive", "")).thenReturn("true");
            when(externalCardResMap.getOrDefault("cardTitle", "")).thenReturn("Card Title");
            when(externalCardResMap.getOrDefault("cardDescription", "")).thenReturn("External Card Description");
            when(externalCardResMap.getOrDefault("cardLink", "")).thenReturn("https://wmrsi.webfarm-qa.ms.com/pub/content/wmrsi/microsites/gio-offerings");
            when(externalCardResMap.getOrDefault("cardimage", "")).thenReturn("/content/dam/microsites/img1.jpeg");
            when(externalCardResMap.getOrDefault("Linkwindowtype", "blank")).thenReturn("self");
            when(externalCardResMap.getOrDefault("micrositeRank", "0")).thenReturn("2");
            when(externalCardResMap.getOrDefault("LinkText", "Explore Now")).thenReturn("Explore Now");

            landingPageModel.init();

            // Add assertions to verify the behavior and state of the model
        } catch (Exception e) {
            System.out.println("Exception in LandingPageModelTest " + e);
        }
    }

    @Test
    public void testInit_withException() {
        try {
            when(resourceResolver.resolve(RSI_PATH)).thenThrow(new RuntimeException("Test Exception"));

            landingPageModel.init();

            // Add assertions to verify that exceptions are handled correctly
        } catch (Exception e) {
            System.out.println("Exception in LandingPageModelTest " + e);
        }
    }

    @Test
    public void testCheckInternalLink() {
        LandingPagePojo landingObject = new LandingPagePojo();
        String link = "/content/test/page";

        landingPageModel.checkInternalLink(landingObject, link);

        // Verify the result of the checkInternalLink method
        assertEquals("true", landingObject.getIsInternalLink());
    }
}
