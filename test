package com.ms.wmrsicms.core.microsites.slingmodels;

import com.day.cq.wcm.api.Page;
import com.google.gson.Gson;
import com.ms.wmrsicms.core.common.Constants;
import com.ms.wmrsicms.core.services.CommonConfiguration;
import com.ms.wmrsicms.core.servlets.CommonUtil;
import org.apache.commons.lang3.StringUtils;
import org.apache.jackrabbit.commons.JcrUtils;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.settings.SlingSettingsService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import javax.jcr.Node;
import java.util.*;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest(JcrUtils.class)
public class LandingPageModelTest {

    @InjectMocks
    private LandingPageModel landingPageModel;

    @Mock
    private ResourceResolver resourceResolver;

    @Mock
    private SlingSettingsService slingSettingsService;

    @Mock
    private Page currentPage;

    @Mock
    private CommonConfiguration commonConfiguration;

    @Mock
    private Resource rsiMainRes;

    @Mock
    private Resource childRes;

    @Mock
    private Resource jcrNodeRes;

    @Mock
    private Node jcrNode;

    @Mock
    private ValueMap valueMap;

    @Mock
    private Resource externalCardResource;

    @Mock
    private ValueMap externalCardResMap;

    private List<Resource> landingPageCards;

    private static final String RSI_PATH = "/content/wmrsi/microsites/gio-offerings";
    private static final String MICROSITE_BLANK_TEMPLATE = "wmrsicms/components/page/micrositeblankpage";

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(JcrUtils.class);
    }

    @Test
    public void testInit_withMicrositeLandingTemplate() throws Exception {
        // Set up mocks
        when(currentPage.getPath()).thenReturn("/content/wmrsi/microsites/gio-offerings");
        when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(Collections.singletonMap(Constants.CQ_TEMPLATE, MICROSITE_BLANK_TEMPLATE));
        when(rsiMainRes.listChildren()).thenReturn(Collections.singletonList(childRes).iterator());
        when(childRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
        when(resourceResolver.resolve(childRes.getPath() + "/jcr:content")).thenReturn(jcrNodeRes);
        when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);
        when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY)).thenReturn(MICROSITE_BLANK_TEMPLATE);
        when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
        when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY)).thenReturn("Landing Page");
        when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY)).thenReturn("Sample description");
        when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
        when(JcrUtils.getStringProperty(jcrNode, "LinkText", "Explore Now")).thenReturn("Explore Now");
        when(JcrUtils.getStringProperty(jcrNode, "Linkwindowtype", "self")).thenReturn("self");
        when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0")).thenReturn("1");
        when(slingSettingsService.getRunModes()).thenReturn(new HashSet<>(Collections.singletonList("author")));

        landingPageCards = new ArrayList<>();
        landingPageCards.add(externalCardResource);
        landingPageModel.setLandingPageCards(landingPageCards);

        when(externalCardResource.getValueMap()).thenReturn(externalCardResMap);
        when(externalCardResMap.getOrDefault("cardTitle", StringUtils.EMPTY)).thenReturn("Card Title");
        when(externalCardResMap.getOrDefault("cardDescription", StringUtils.EMPTY)).thenReturn("External Card Description");
        when(externalCardResMap.getOrDefault("cardLink", StringUtils.EMPTY)).thenReturn("https://wmrsi.webfarm-qa.ms.com/pub/content/wmrsi/microsites/gio-offerings");
        when(externalCardResMap.getOrDefault("cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
        when(externalCardResMap.getOrDefault("linkwindowtype", "blank")).thenReturn("self");
        when(externalCardResMap.getOrDefault("micrositeRank", "0")).thenReturn("2");
        when(externalCardResMap.getOrDefault("LinkText", "Explore Now")).thenReturn("Explore Now");
        when(externalCardResMap.getOrDefault("isActive", StringUtils.EMPTY)).thenReturn("true");

        landingPageModel.init();

        // Validate that microsites were added and sorted correctly
        assertNotNull(landingPageModel.getMicrosites());
        assertEquals(2, landingPageModel.getMicrosites().size()); // Assuming 2 microsites should be present
    }

    @Test
    public void testInit_withEmptyLandingPageCards() throws Exception {
        when(currentPage.getPath()).thenReturn("/content/wmrsi/microsites/gio-offerings");
        when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(Collections.singletonMap(Constants.CQ_TEMPLATE, MICROSITE_BLANK_TEMPLATE));
        when(rsiMainRes.listChildren()).thenReturn(Collections.emptyIterator());

        landingPageCards = Collections.emptyList();
        landingPageModel.setLandingPageCards(landingPageCards);

        landingPageModel.init();

        // Validate that microsites list is still initialized even if empty
        assertNotNull(landingPageModel.getMicrosites());
        assertTrue(landingPageModel.getMicrosites().isEmpty());
    }

    @Test
    public void testInit_withException() throws Exception {
        when(currentPage.getPath()).thenReturn("/content/wmrsi/microsites/gio-offerings");
        when(resourceResolver.resolve(RSI_PATH)).thenThrow(new RuntimeException("Resource not found"));

        landingPageCards = new ArrayList<>();
        landingPageModel.setLandingPageCards(landingPageCards);

        landingPageModel.init();

        // Verify that an exception was logged
        verifyStatic(JcrUtils.class);
        JcrUtils.getStringProperty(any(Node.class), anyString(), anyString());
    }

    @Test
    public void testCheckInternalLink() {
        LandingPagePojo landingObject = new LandingPagePojo();

        // Test internal link
        landingPageModel.checkInternalLink(landingObject, "/content/some-page");
        assertEquals("true", landingObject.getIsInternalLink());

        // Test external link
        when(commonConfiguration.getDispatcherHostName()).thenReturn("external-host");
        when(commonConfiguration.getRsiDomainName()).thenReturn("rsi-domain");
        landingPageModel.checkInternalLink(landingObject, "http://external.com");
        assertEquals("false", landingObject.getIsInternalLink());
    }
}
