  @Test
    public void testInit_withMicrositeLandingTemplate() throws Exception {
        // Mocking rsiMainRes
        Map<String, Object> rsiValueMap = new HashMap<>();
        rsiValueMap.put(Constants.CQ_TEMPLATE, MICROSITE_BLANK_TEMPLATE);
        when(rsiMainRes.getValueMap()).thenReturn(rsiValueMap);

        // Mocking childRes
        Map<String, Object> childValueMap = new HashMap<>();
        childValueMap.put("jcr:primaryType", "cq:Page");
        when(childRes.getValueMap()).thenReturn(childValueMap);

        // Mocking listChildren to return an iterator with childRes
        when(rsiMainRes.listChildren()).thenReturn(Collections.singletonList(childRes).iterator());

        // Mocking resourceResolver.resolve
        when(resourceResolver.resolve(RSI_PATH + "/jcr:content")).thenReturn(jcrNodeRes);
        when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);

        // Mocking JcrUtils calls
        when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY)).thenReturn(MICROSITE_BLANK_TEMPLATE);
        when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
        when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY)).thenReturn("Landing Page");
        when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY)).thenReturn("Sample description");
        when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
        when(JcrUtils.getStringProperty(jcrNode, "LinkText", "Explore Now")).thenReturn("Explore Now");
        when(JcrUtils.getStringProperty(jcrNode, "Linkwindowtype", "self")).thenReturn("self");
        when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0")).thenReturn("1");

        // Mocking slingSettingsService
        Set<String> runModes = new HashSet<>(Collections.singletonList("author"));
        when(slingSettingsService.getRunModes()).thenReturn(runModes);

        // Mocking externalCardResource
        landingPageCards = new ArrayList<>();
        landingPageCards.add(externalCardResource);
        landingPageModel.setLandingPageCards(landingPageCards);

        // Mocking externalCardResource
        when(externalCardResource.getValueMap()).thenReturn(externalCardResMap);
        when(externalCardResMap.getOrDefault("cardTitle", StringUtils.EMPTY)).thenReturn("Card Title");
        when(externalCardResMap.getOrDefault("cardDescription", StringUtils.EMPTY)).thenReturn("External Card Description");
        when(externalCardResMap.getOrDefault("cardLink", StringUtils.EMPTY)).thenReturn("https://wmrsi.webfarm-qa.ms.com/pub/content/wmrsi/microsites/gio-offerings");
        when(externalCardResMap.getOrDefault("cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
        when(externalCardResMap.getOrDefault("Linkwindowtype", "blank")).thenReturn("self");
        when(externalCardResMap.getOrDefault("micrositeRank", "0")).thenReturn("2");
        when(externalCardResMap.getOrDefault("LinkText", "Explore Now")).thenReturn("Explore Now");
        when(externalCardResMap.getOrDefault("isActive", StringUtils.EMPTY)).thenReturn("true");

        // Run the method
        landingPageModel.init();

        // Validate results
        assertNotNull(landingPageModel.getMicrosites());
        assertEquals(2, landingPageModel.getMicrosites().size()); // Assuming 2 microsites should be present
    }
}

.........


import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.MockitoAnnotations.initMocks;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

public class LandingPageModelTest {

    @InjectMocks
    private LandingPageModel landingPageModel;

    @Mock
    private ResourceResolver resourceResolver;

    @Mock
    private SlingSettingsService slingSettingsService;

    // Other mocks...

    private List<LandingPagePojo> micrositeList;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);

        // Initialize micrositeList
        micrositeList = new ArrayList<>();
        LandingPagePojo pojo1 = new LandingPagePojo();
        pojo1.setPageTitle("Title 1");
        pojo1.setPageDescription("Description 1");
        pojo1.setImagePath("/path/to/image1.jpg");
        pojo1.setPageLink("/link1");
        pojo1.setMicrositeRank(1);
        micrositeList.add(pojo1);

        LandingPagePojo pojo2 = new LandingPagePojo();
        pojo2.setPageTitle("Title 2");
        pojo2.setPageDescription("Description 2");
        pojo2.setImagePath("/path/to/image2.jpg");
        pojo2.setPageLink("/link2");
        pojo2.setMicrositeRank(2);
        micrositeList.add(pojo2);

        // Set the microsites list in the landingPageModel
        landingPageModel.setMicrosites(micrositeList);
    }

    @Test
    public void testGetMicrosites() {
        List<LandingPagePojo> result = landingPageModel.getMicrosites();

        assertEquals(2, result.size());
        assertEquals("Title 1", result.get(0).getPageTitle());
        assertEquals("Description 1", result.get(0).getPageDescription());
        assertEquals("/path/to/image1.jpg", result.get(0).getImagePath());
        assertEquals("/link1", result.get(0).getPageLink());
        assertEquals(1, result.get(0).getMicrositeRank());

        assertEquals("Title 2", result.get(1).getPageTitle());
        assertEquals("Description 2", result.get(1).getPageDescription());
        assertEquals("/path/to/image2.jpg", result.get(1).getImagePath());
        assertEquals("/link2", result.get(1).getPageLink());
        assertEquals(2, result.get(1).getMicrositeRank());
    }
}

