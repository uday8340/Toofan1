@Test
public void testInit_SuccessfullyResolvesResource() throws Exception {
    // Mock resource resolver and resource
    when(resourceResolver.resolve(anyString())).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);

    // Mock value map to return correct MICROSITE_LANDING_TEMPLATE
    when(valueMap.get(Constants.CQ_TEMPLATE, StringUtils.EMPTY))
        .thenReturn(Constants.MICROSITE_LANDING_TEMPLATE);

    // Mock child resources and their properties
    Iterator<Resource> iterator = Mockito.mock(Iterator.class);
    when(rsiMainRes.listChildren()).thenReturn(iterator);
    when(iterator.hasNext()).thenReturn(true, false);  // One child
    when(iterator.next()).thenReturn(childRes1);
    when(childRes1.getValueMap()).thenReturn(childValueMap);
    when(childRes1.getPath()).thenReturn("/content/child1");

    // Mock node properties
    when(resourceResolver.resolve(anyString())).thenReturn(jcrNodeRes);
    when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);
    when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY))
        .thenReturn(Constants.MICROSITE_RESOURCE_TYPE);
    when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
    when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY))
        .thenReturn("Sample Title");
    when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY))
        .thenReturn("Sample Description");
    when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY))
        .thenReturn("/content/sampleimage.jpg");

    // Simulate run mode as "author"
    Set<String> runModes = new HashSet<>();
    runModes.add("author");
    when(slingSettingsService.getRunModes()).thenReturn(runModes);

    // Call init method
    landingPageModel.init();

    // Assertions to verify microsites list is populated
    List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
    assertNotNull(microsites);
    assertEquals(1, microsites.size());

    LandingPagePojo landingObject = microsites.get(0);
    assertEquals("Sample Title", landingObject.getPageTitle());
    assertEquals("Sample Description", landingObject.getPageDescription());
    assertEquals("/content/sampleimage.jpg", landingObject.getImagePath());
    assertEquals("/auth/child1.html", landingObject.getPageLink());  // Link in author mode
}

@Test
public void testInit_ResourceNotFound() throws Exception {
    // Simulate a resource resolve returning null
    when(resourceResolver.resolve(anyString())).thenReturn(null);

    // Call init method
    landingPageModel.init();

    // Assert that microsites list is empty
    List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
    assertNotNull(microsites);
    assertEquals(0, microsites.size());
}

@Test
public void testInit_EmptyListChildren() throws Exception {
    // Mock resource resolver and resource
    when(resourceResolver.resolve(anyString())).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);

    // Mock value map to return correct MICROSITE_LANDING_TEMPLATE
    when(valueMap.get(Constants.CQ_TEMPLATE, StringUtils.EMPTY))
        .thenReturn(Constants.MICROSITE_LANDING_TEMPLATE);

    // Mock an empty iterator for listChildren
    Iterator<Resource> iterator = Mockito.mock(Iterator.class);
    when(rsiMainRes.listChildren()).thenReturn(iterator);
    when(iterator.hasNext()).thenReturn(false);  // No children

    // Call init method
    landingPageModel.init();

    // Assert that microsites list is empty
    List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
    assertNotNull(microsites);
    assertEquals(0, microsites.size());
}

@Test
public void testInit_NonAuthorRunMode() throws Exception {
    // Mock resource resolver and resource
    when(resourceResolver.resolve(anyString())).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);

    // Mock value map to return correct MICROSITE_LANDING_TEMPLATE
    when(valueMap.get(Constants.CQ_TEMPLATE, StringUtils.EMPTY))
        .thenReturn(Constants.MICROSITE_LANDING_TEMPLATE);

    // Mock child resources and their properties
    Iterator<Resource> iterator = Mockito.mock(Iterator.class);
    when(rsiMainRes.listChildren()).thenReturn(iterator);
    when(iterator.hasNext()).thenReturn(true, false);  // One child
    when(iterator.next()).thenReturn(childRes1);
    when(childRes1.getValueMap()).thenReturn(childValueMap);
    when(childRes1.getPath()).thenReturn("/content/child1");

    // Mock node properties
    when(resourceResolver.resolve(anyString())).thenReturn(jcrNodeRes);
    when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);
    when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY))
        .thenReturn(Constants.MICROSITE_RESOURCE_TYPE);
    when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
    when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY))
        .thenReturn("Sample Title");
    when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY))
        .thenReturn("Sample Description");
    when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY))
        .thenReturn("/content/sampleimage.jpg");

    // Simulate run mode as "non-author"
    Set<String> runModes = new HashSet<>();
    when(slingSettingsService.getRunModes()).thenReturn(runModes);  // No "author" mode

    // Call init method
    landingPageModel.init();

    // Assertions to verify microsites list is populated
    List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
    assertNotNull(microsites);
    assertEquals(1, microsites.size());

    LandingPagePojo landingObject = microsites.get(0);
    assertEquals("Sample Title", landingObject.getPageTitle());
    assertEquals("Sample Description", landingObject.getPageDescription());
    assertEquals("/pub/child1.html", landingObject.getPageLink());  // Link in non-author mode
}
