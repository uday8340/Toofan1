package com.ms.wmrsicms.core.microsites.slingmodels;

import com.day.cq.wcm.api.Page;
import com.google.gson.Gson;
import com.ms.wmrsicms.core.common.Constants;
import com.ms.wmrsicms.core.services.CommonConfiguration;
import org.apache.commons.lang3.StringUtils;
import org.apache.jackrabbit.commons.JcrUtils;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.settings.SlingSettingsService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import javax.jcr.Node;
import java.util.*;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest(JcrUtils.class)
public class LandingPageModelTest {

    @InjectMocks
    private LandingPageModel landingPageModel;

    @Mock
    private ResourceResolver resourceResolver;

    @Mock
    private SlingSettingsService slingSettingsService;

    @Mock
    private Page currentPage;

    @Mock
    private CommonConfiguration commonConfiguration;

    @Mock
    private Resource rsiMainRes;

    @Mock
    private Resource childRes;

    @Mock
    private Resource jcrNodeRes;

    @Mock
    private Node jcrNode;

    @Mock
    private ValueMap valueMap;

    @Mock
    private Resource externalCardResource;

    @Mock
    private ValueMap externalCardResMap;

    private static final String RSI_PATH = "/content/wmrsi/microsites/gio-offerings";
    private static final String MICROSITE_BLANK_TEMPLATE = "wmrsicms/components/page/micrositeblankpage";

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(JcrUtils.class);
    }

    @Test
    public void testInit() {
        try {
            // Mocking the setup
            when(currentPage.getPath()).thenReturn(RSI_PATH);
            when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
            when(rsiMainRes.listChildren()).thenReturn(Collections.singletonList(childRes).iterator());
            when(childRes.getValueMap()).thenReturn(valueMap);
            when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
            when(childRes.getPath()).thenReturn("/content/wmrsi/landing-page");
            when(resourceResolver.resolve(childRes.getPath() + "/jcr:content")).thenReturn(jcrNodeRes);
            when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);
            when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY)).thenReturn(MICROSITE_BLANK_TEMPLATE);
            when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
            when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY)).thenReturn("Landing Page");
            when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY)).thenReturn("Sample description");
            when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
            when(JcrUtils.getStringProperty(jcrNode, "LinkText", "Explore Now")).thenReturn("Explore Now");
            when(JcrUtils.getStringProperty(jcrNode, "Linkwindowtype", "self")).thenReturn("self");
            when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0")).thenReturn("1");

            Set<String> runModes = new HashSet<>();
            runModes.add("author");
            when(slingSettingsService.getRunModes()).thenReturn(runModes);

            landingPageModel.init();

            // Assertions to ensure microsites list is populated correctly
            List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
            assertNotNull(microsites);
            assertFalse(microsites.isEmpty());
            assertEquals(1, microsites.size());
            LandingPagePojo microsite = microsites.get(0);
            assertEquals("Landing Page", microsite.getPageTitle());
            assertEquals("Sample description", microsite.getPageDescription());

        } catch (Exception e) {
            fail("Exception in testInit: " + e.getMessage());
        }
    }

    @Test
    public void testInitWithExternalCards() {
        try {
            // Mocking the setup
            when(currentPage.getPath()).thenReturn(RSI_PATH);
            when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
            when(rsiMainRes.listChildren()).thenReturn(Collections.singletonList(childRes).iterator());
            when(childRes.getValueMap()).thenReturn(valueMap);
            when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
            when(childRes.getPath()).thenReturn("/content/wmrsi/landing-page");
            when(resourceResolver.resolve(childRes.getPath() + "/jcr:content")).thenReturn(jcrNodeRes);
            when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);
            when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY)).thenReturn(MICROSITE_BLANK_TEMPLATE);
            when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
            when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY)).thenReturn("Landing Page");
            when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY)).thenReturn("Sample description");
            when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
            when(JcrUtils.getStringProperty(jcrNode, "LinkText", "Explore Now")).thenReturn("Explore Now");
            when(JcrUtils.getStringProperty(jcrNode, "Linkwindowtype", "self")).thenReturn("self");
            when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0")).thenReturn("1");

            // External card setup
            List<Resource> externalCards = new ArrayList<>();
            externalCards.add(externalCardResource);
            when(externalCardResource.getValueMap()).thenReturn(externalCardResMap);
            when(externalCardResMap.getOrDefault("cardTitle", StringUtils.EMPTY)).thenReturn("External Card Title");
            when(externalCardResMap.getOrDefault("cardDescription", StringUtils.EMPTY)).thenReturn("External Card Description");
            when(externalCardResMap.getOrDefault("cardLink", StringUtils.EMPTY)).thenReturn("https://example.com");
            when(externalCardResMap.getOrDefault("cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img2.jpeg");
            when(externalCardResMap.getOrDefault("Linkwindowtype", "blank")).thenReturn("self");
            when(externalCardResMap.getOrDefault("micrositeRank", "0")).thenReturn("2");
            when(externalCardResMap.getOrDefault("LinkText", "Explore More")).thenReturn("Explore More");
            when(externalCardResMap.getOrDefault("isActive", StringUtils.EMPTY)).thenReturn("true");

            landingPageModel.setLandingPageCards(externalCards);
            landingPageModel.init();

            // Assertions to ensure external cards are added to microsites list
            List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
            assertNotNull(microsites);
            assertEquals(2, microsites.size()); // 1 internal + 1 external card
            LandingPagePojo externalCard = microsites.get(1);
            assertEquals("External Card Title", externalCard.getPageTitle());
            assertEquals("External Card Description", externalCard.getPageDescription());

        } catch (Exception e) {
            fail("Exception in testInitWithExternalCards: " + e.getMessage());
        }
    }

    @Test
    public void testCheckInternalLink() {
        LandingPagePojo landingObject = new LandingPagePojo();
        String internalLink = "/content/some/path";
        String externalLink = "https://example.com";

        landingPageModel.checkInternalLink(landingObject, internalLink);
        assertTrue(landingObject.getIsInternalLink());

        landingPageModel.checkInternalLink(landingObject, externalLink);
        assertFalse(landingObject.getIsInternalLink());
    }

    @Test
    public void testSortingMicrosites() {
        // This test will focus on the sorting functionality
        try {
            List<LandingPagePojo> microsites = new ArrayList<>();
            LandingPagePojo pojo1 = new LandingPagePojo();
            pojo1.setMicrositeRank(2);
            pojo1.setPageTitle("Page 1");

            LandingPagePojo pojo2 = new LandingPagePojo
