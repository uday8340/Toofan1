@RunWith(MockitoJUnitRunner.class)
public class LandingPageModelTest {

    @InjectMocks
    private LandingPageModel landingPageModel;

    @Mock
    private ResourceResolver resourceResolver;

    @Mock
    private Page currentPage;

    @Mock
    private CommonConfiguration commonConfiguration;

    @Mock
    private Resource rsiMainRes;

    @Mock
    private SlingSettingsService slingSettingsService;

    @Mock
    private Node jcrNode;

    @Mock
    private ValueMap valueMap;

    @Mock
    private Resource externalCardResource;

    @Before
    public void setUp() throws Exception {
        when(currentPage.getPath()).thenReturn("/content/test");
        when(resourceResolver.resolve("/content/test/jcr:content")).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(Collections.singletonMap(Constants.CQ_TEMPLATE, Constants.MICROSITE_LANDING_TEMPLATE));
        when(rsiMainRes.listChildren()).thenReturn(Collections.singleton(mock(Resource.class)).iterator());
    }

    @Test
    public void testInit() throws Exception {
        when(slingSettingsService.getRunModes()).thenReturn(Collections.singleton("author"));
        when(rsiMainRes.getValueMap()).thenReturn(Collections.singletonMap("jcr:primaryType", "cq:Page"));
        when(resourceResolver.resolve("/content/test/jcr:content").adaptTo(Node.class)).thenReturn(jcrNode);

        when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY))
                .thenReturn(Constants.MICROSITE_RESOURCE_TYPE);
        when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");

        landingPageModel.init();

        List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
        assertNotNull(microsites);
        assertEquals(1, microsites.size());
    }

    @Test
    public void testInitWithException() throws Exception {
        // Force exception in resolve method
        when(resourceResolver.resolve("/content/test/jcr:content")).thenThrow(new RuntimeException("Test Exception"));

        landingPageModel.init();

        // Validate that the exception was caught and handled
        List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
        assertNotNull(microsites);  // List should still be initialized
        assertTrue(microsites.isEmpty());
    }

    @Test
    public void testCheckInternalLinkTrue() {
        LandingPagePojo landingObject = new LandingPagePojo();
        String link = "/content/test-page";

        when(commonConfiguration.getDispatcherHostName()).thenReturn("dispatcher-host");
        when(commonConfiguration.getRsiDomainName()).thenReturn("rsi-domain");

        // Invoke private method via reflection
        Method method = LandingPageModel.class.getDeclaredMethod("checkInternalLink", LandingPagePojo.class, String.class);
        method.setAccessible(true);
        method.invoke(landingPageModel, landingObject, link);

        assertEquals("true", landingObject.getIsInternalLink());
    }

    @Test
    public void testCheckInternalLinkFalse() {
        LandingPagePojo landingObject = new LandingPagePojo();
        String link = "http://external-link.com";

        when(commonConfiguration.getDispatcherHostName()).thenReturn("dispatcher-host");
        when(commonConfiguration.getRsiDomainName()).thenReturn("rsi-domain");

        Method method = LandingPageModel.class.getDeclaredMethod("checkInternalLink", LandingPagePojo.class, String.class);
        method.setAccessible(true);
        method.invoke(landingPageModel, landingObject, link);

        assertEquals("false", landingObject.getIsInternalLink());
    }
}
