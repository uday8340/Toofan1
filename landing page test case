package com.ms.wmrsicms.core.mygio.services;

import com.ms.wmrsicms.core.microsites.slingmodels.LandingPageModel;
import org.apache.commons.lang.StringUtils;
import org.apache.jackrabbit.commons.JcrUtils;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.settings.SlingSettingsService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import javax.jcr.Node;
import java.util.*;

import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest(JcrUtils.class)
public class LandingPageModelTest {

    @InjectMocks
    LandingPageModel landingPageModel;

    @Mock
    ResourceResolver resourceResolver;

    @Mock
    SlingSettingsService slingSettingsService;

    @Mock
    Resource rsiMainRes;

    List<Resource> list;

    @Mock
    Resource childRes1;

    @Mock
    ValueMap valueMap;

    @Mock
    Resource jcrNodeRes;

    @Mock
    Node jcrNode;

    List<Resource> landingPageCards;

    @Mock
    Resource externalCardResource;

    @Mock
    ValueMap externalCardResMap;

    public static final String MICROSITE_TEMPLATE = "wmrsicms/components/page/micrositeblankpage";
    public static final String RSI_PATH = "/content/wmrsi/microsites/gio-offerings";

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(JcrUtils.class);
    }

    @Test
    public void testInitSuccessScenario() throws Exception {
        // Setup basic valid data
        when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
        list = new ArrayList<>();
        list.add(childRes1);
        Iterator<Resource> itr = list.iterator();
        when(rsiMainRes.listChildren()).thenReturn(itr);
        when(childRes1.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
        when(childRes1.getPath()).thenReturn("/content/wmrsi/landing-page");
        when(resourceResolver.resolve("/content/wmrsi/landing-page/jcr:content")).thenReturn(jcrNodeRes);
        when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);
        when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY)).thenReturn(MICROSITE_TEMPLATE);
        when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
        when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY)).thenReturn("Landing Page");
        when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY)).thenReturn("Sample description");
        when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
        when(JcrUtils.getStringProperty(jcrNode, "linkText", "Explore Now")).thenReturn("Explore Now");
        when(JcrUtils.getStringProperty(jcrNode, "linkwindowtype", "blank")).thenReturn("self");

        // Run mode is author
        Set<String> runModes = new HashSet<>();
        runModes.add("author");
        when(slingSettingsService.getRunModes()).thenReturn(runModes);

        // Rank
        when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0")).thenReturn("1");

        // External card setup
        landingPageCards = new ArrayList<>();
        landingPageCards.add(externalCardResource);
        landingPageModel.setLandingPageCards(landingPageCards);

        when(externalCardResource.getValueMap()).thenReturn(externalCardResMap);
        when(externalCardResMap.getOrDefault("isActive", StringUtils.EMPTY)).thenReturn("true");
        when(externalCardResMap.getOrDefault("cardTitle", StringUtils.EMPTY)).thenReturn("Card Title");
        when(externalCardResMap.getOrDefault("cardDescription", StringUtils.EMPTY)).thenReturn("External Card Description");
        when(externalCardResMap.getOrDefault("cardLink", StringUtils.EMPTY)).thenReturn("/content/external-card");
        when(externalCardResMap.getOrDefault("cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/external-img.jpeg");
        when(externalCardResMap.getOrDefault("linkwindowtype", "blank")).thenReturn("_blank");
        when(externalCardResMap.getOrDefault("micrositeRank", "0")).thenReturn("2");

        // Test initialization method
        landingPageModel.init();

        // Add assertions as per your expected behavior (size of microsites, etc.)
        assertNotNull(landingPageModel.getMicrosites());
        assertEquals(2, landingPageModel.getMicrosites().size());
    }

    @Test
    public void testInitNoActivePage() throws Exception {
        // Setting up for no active page
        when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
        when(rsiMainRes.listChildren()).thenReturn(Collections.emptyIterator());

        // Test initialization method
        landingPageModel.init();

        // Assert that microsites list is empty
        assertTrue(landingPageModel.getMicrosites().isEmpty());
    }

    @Test
    public void testInitInactiveCard() throws Exception {
        // Setup a case where the card is inactive
        when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
        list = new ArrayList<>();
        list.add(childRes1);
        Iterator<Resource> itr = list.iterator();
        when(rsiMainRes.listChildren()).thenReturn(itr);
        when(childRes1.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
        when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("false");

        // Test initialization method
        landingPageModel.init();

        // Assert that microsites list is still empty due to inactive card
        assertTrue(landingPageModel.getMicrosites().isEmpty());
    }

    @Test
    public void testCatchBlockCoverage() throws Exception {
        // Throwing an exception to test the catch block
        when(resourceResolver.resolve(RSI_PATH)).thenThrow(new RuntimeException("Mocked exception"));

        // Test initialization method
        landingPageModel.init();

        // No exceptions should propagate
    }
}
