@Test
public void testInit_SuccessCase_WithMicrosites() throws Exception {
    // Mocking Resource and ResourceResolver
    when(resourceResolver.resolve(anyString())).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);

    // Mocking ValueMap to return the MICROSITE_LANDING_TEMPLATE for CQ_TEMPLATE
    when(valueMap.get(Constants.CQ_TEMPLATE, StringUtils.EMPTY)).thenReturn(Constants.MICROSITE_LANDING_TEMPLATE);

    // Mocking iterator for listChildren and Resource child
    Iterator<Resource> iterator = Mockito.mock(Iterator.class);
    when(rsiMainRes.listChildren()).thenReturn(iterator);
    when(iterator.hasNext()).thenReturn(true, false);  // first true, then false to simulate only one child

    // Mock the child Resource and its ValueMap
    when(iterator.next()).thenReturn(childRes1);
    when(childRes1.getValueMap()).thenReturn(valueMap);
    when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
    when(childRes1.getPath()).thenReturn("/content/wmrsi/landing-page");

    // Mock JCR node and its properties
    when(resourceResolver.resolve(anyString())).thenReturn(jcrNodeRes);
    when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);

    when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY))
        .thenReturn(Constants.MICROSITE_RESOURCE_TYPE);
    when(JcrUtils.getStringProperty(jcrNode, "isActive", "false"))
        .thenReturn("true");
    when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY))
        .thenReturn("Landing Page");
    when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY))
        .thenReturn("Sample description");
    when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY))
        .thenReturn("/content/dam/microsites/img1.jpeg");
    when(JcrUtils.getStringProperty(jcrNode, "linkText", "Explore Now"))
        .thenReturn("Explore Now");
    when(JcrUtils.getStringProperty(jcrNode, "linkwindowtype", "_self"))
        .thenReturn("_self");
    when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0"))
        .thenReturn("1");

    // Simulate author run mode
    Set<String> runModes = new HashSet<>();
    runModes.add("author");
    when(slingSettingsService.getRunModes()).thenReturn(runModes);

    // Run the init method
    landingPageModel.init();

    // Assertions to verify the state of microsites
    List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
    assertNotNull(microsites);
    assertEquals(1, microsites.size());

    LandingPagePojo landingObject = microsites.get(0);
    assertEquals("Landing Page", landingObject.getPageTitle());
    assertEquals("Sample description", landingObject.getPageDescription());
    assertEquals("/content/dam/microsites/img1.jpeg", landingObject.getImagePath());
    assertEquals("Explore Now", landingObject.getLinkText());
    assertEquals(1, landingObject.getMicrositeRank());
    assertEquals("_self", landingObject.getLinkwindowtype());
    assertEquals("/auth/landing-page.html", landingObject.getPageLink());  // Since it's in author run mode
}

@Test
public void testInit_EmptyOrNonMatchingResourceType() throws Exception {
    // Mocking Resource and ResourceResolver
    when(resourceResolver.resolve(anyString())).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);

    // Mock ValueMap to return an incorrect CQ_TEMPLATE
    when(valueMap.get(Constants.CQ_TEMPLATE, StringUtils.EMPTY)).thenReturn("someOtherTemplate");

    // Run the init method
    landingPageModel.init();

    // Verify that microsites remain empty due to the incorrect template
    List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
    assertNotNull(microsites);
    assertTrue(microsites.isEmpty());
}

@Test
public void testInit_ExceptionHandling() throws Exception {
    // Mocking Resource to throw an exception when resolved
    when(resourceResolver.resolve(anyString())).thenThrow(new RuntimeException("Test Exception"));

    // Run the init method
    landingPageModel.init();

    // Verify that microsites remain empty due to the exception
    List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
    assertNotNull(microsites);
    assertTrue(microsites.isEmpty());
}
