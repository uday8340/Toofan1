package com.ms.wmrsicms.core.mygio.services;

import java.util.*;
import javax.jcr.Node;

import org.apache.commons.lang.StringUtils;
import org.apache.jackrabbit.commons.JcrUtils;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.settings.SlingSettingsService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.ms.wmrsicms.core.microsites.slingmodels.LandingPageModel;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({JcrUtils.class})
public class LandingPageModelTest {

    @InjectMocks
    LandingPageModel landingPageModel;

    @Mock
    ResourceResolver resourceResolver;

    @Mock
    SlingSettingsService slingSettingsService;

    @Mock
    Resource rsiMainRes;

    @Mock
    Resource childRes1;

    @Mock
    ValueMap valueMap;

    @Mock
    Resource jcrNodeRes;

    @Mock
    Node jcrNode;

    @Mock
    Resource externalCardResource;

    @Mock
    ValueMap externalCardResMap;

    List<Resource> landingPageCards;

    public static final String RSI_PATH = "/content/wmrsi/microsites/gio-offerings";
    public static final String MICROSITES_BLANK_TEMPLATE = "wmrsicms/components/page/micrositeblankpage";

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(JcrUtils.class);
    }

    @Test
    public void testInit() {
        try {
            when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
            when(rsiMainRes.listChildren()).thenReturn(Arrays.asList(childRes1).iterator());
            when(childRes1.getValueMap()).thenReturn(valueMap);
            when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
            when(childRes1.getPath()).thenReturn("/content/wmrsi/landing-page");
            when(resourceResolver.resolve(childRes1.getPath() + "/jcr:content")).thenReturn(jcrNodeRes);
            when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);
            when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY)).thenReturn(MICROSITES_BLANK_TEMPLATE);
            when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
            when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY)).thenReturn("Landing Page");
            when(JcrUtils.getStringProperty(jcrNode, "linkText", "Explore Now")).thenReturn("Explore Now");
            when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY)).thenReturn("Sample description");
            when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
            when(JcrUtils.getStringProperty(jcrNode, "linkwindowtype", "_blank")).thenReturn("_blank");
            when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0")).thenReturn("1");

            // Mock run modes
            Set<String> runModes = new HashSet<>();
            runModes.add("author");
            when(slingSettingsService.getRunModes()).thenReturn(runModes);

            // Mock external cards
            landingPageCards = new ArrayList<>();
            landingPageCards.add(externalCardResource);
            landingPageModel.setLandingPageCards(landingPageCards);

            when(externalCardResource.getValueMap()).thenReturn(externalCardResMap);
            when(externalCardResMap.getOrDefault("cardTitle", StringUtils.EMPTY)).thenReturn("Card Title");
            when(externalCardResMap.getOrDefault("cardDescription", StringUtils.EMPTY)).thenReturn("External Card Description");
            when(externalCardResMap.getOrDefault("cardLink", StringUtils.EMPTY)).thenReturn("https://wmrsi.webfarm-qa.ms.com/pub/content/wmrsi/microsites/gio-offerings");
            when(externalCardResMap.getOrDefault("cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
            when(externalCardResMap.getOrDefault("linkwindowtype", "blank")).thenReturn("_self");
            when(externalCardResMap.getOrDefault("micrositeRank", "0")).thenReturn("2");
            when(externalCardResMap.getOrDefault("linkText", "Explore Now")).thenReturn("Explore Now");
            when(externalCardResMap.getOrDefault("isActive", StringUtils.EMPTY)).thenReturn("true");

            landingPageModel.init();

            // Assertions
            assertNotNull(landingPageModel.getMicrosites());
            assertEquals(2, landingPageModel.getMicrosites().size());  // Expecting 2 items (1 internal, 1 external)
            assertEquals("Landing Page", landingPageModel.getMicrosites().get(0).getPageTitle());
            assertEquals("Card Title", landingPageModel.getMicrosites().get(1).getPageTitle());

        } catch (Exception e) {
            fail("Exception in LandingPageModelTest: " + e.getMessage());
        }
    }
}
