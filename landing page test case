import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.settings.SlingSettingsService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import javax.jcr.Node;
import java.util.*;
import com.ms.wmrsicms.core.microsites.slingmodels.LandingPageModel;

import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest(JcrUtils.class)
public class LandingPageModelTest {

    @InjectMocks
    private LandingPageModel landingPageModel;

    @Mock
    private ResourceResolver resourceResolver;

    @Mock
    private SlingSettingsService slingSettingsService;

    @Mock
    private Resource rsiMainRes;

    @Mock
    private Resource childRes;

    @Mock
    private ValueMap valueMap;

    @Mock
    private Resource jcrNodeRes;

    @Mock
    private Node jcrNode;

    private List<Resource> landingPageCards;

    @Mock
    private Resource externalCardResource;

    @Mock
    private ValueMap externalCardResMap;

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(JcrUtils.class);
    }

    // Test for null Resource Resolver and empty children
    @Test
    public void testInitWithNullResource() {
        when(resourceResolver.resolve(anyString())).thenReturn(null);
        landingPageModel.init();
        // Assert that no microsites are added
        assertTrue(landingPageModel.getMicrosites().isEmpty());
    }

    // Test when the template does not match
    @Test
    public void testInitWithNonMatchingTemplate() {
        when(resourceResolver.resolve(anyString())).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get(Constants.CQ_TEMPLATE)).thenReturn("non-matching-template");
        
        landingPageModel.init();
        assertTrue(landingPageModel.getMicrosites().isEmpty());
    }

    // Test with valid data but no nodes
    @Test
    public void testInitWithNoNodes() {
        when(resourceResolver.resolve(anyString())).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get(Constants.CQ_TEMPLATE)).thenReturn(Constants.MICROSITE_LANDING_TEMPLATE);
        when(rsiMainRes.listChildren()).thenReturn(Collections.emptyIterator());

        landingPageModel.init();
        assertTrue(landingPageModel.getMicrosites().isEmpty());
    }

    // Test with invalid node type
    @Test
    public void testInitWithInvalidNode() {
        when(resourceResolver.resolve(anyString())).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get(Constants.CQ_TEMPLATE)).thenReturn(Constants.MICROSITE_LANDING_TEMPLATE);
        when(rsiMainRes.listChildren()).thenReturn(Arrays.asList(childRes).iterator());

        when(childRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("jcr:primaryType", "")).thenReturn("invalid-node");

        landingPageModel.init();
        assertTrue(landingPageModel.getMicrosites().isEmpty());
    }

    // Test with valid data and active microsite
    @Test
    public void testInitWithValidMicrosite() throws Exception {
        when(resourceResolver.resolve(anyString())).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get(Constants.CQ_TEMPLATE)).thenReturn(Constants.MICROSITE_LANDING_TEMPLATE);
        when(rsiMainRes.listChildren()).thenReturn(Arrays.asList(childRes).iterator());

        when(childRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
        when(childRes.getPath()).thenReturn("/content/test-page");
        when(resourceResolver.resolve("/content/test-page/jcr:content")).thenReturn(jcrNodeRes);
        when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);
        when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY)).thenReturn(Constants.MICROSITE_RESOURCE_TYPE);
        when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
        when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY)).thenReturn("Test Title");
        when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY)).thenReturn("Test Description");
        when(JcrUtils.getStringProperty(jcrNode, "cardImage", StringUtils.EMPTY)).thenReturn("/content/dam/test.jpg");

        Set<String> runModes = new HashSet<>();
        runModes.add("author");
        when(slingSettingsService.getRunModes()).thenReturn(runModes);

        landingPageModel.init();
        
        assertFalse(landingPageModel.getMicrosites().isEmpty());
    }

    // Test external card configuration
    @Test
    public void testExternalCards() {
        landingPageCards = new ArrayList<>();
        landingPageCards.add(externalCardResource);
        landingPageModel.setLandingPageCards(landingPageCards);

        when(externalCardResource.getValueMap()).thenReturn(externalCardResMap);
        when(externalCardResMap.getOrDefault("isActive", StringUtils.EMPTY)).thenReturn("true");
        when(externalCardResMap.getOrDefault("cardTitle", StringUtils.EMPTY)).thenReturn("External Card");
        when(externalCardResMap.getOrDefault("cardLink", StringUtils.EMPTY)).thenReturn("/content/external-link");

        landingPageModel.init();

        assertFalse(landingPageModel.getMicrosites().isEmpty());
    }
}
