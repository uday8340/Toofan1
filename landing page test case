package com.ms.wmrsicms.core.mygio.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.jcr.Node;
import org.apache.commons.lang.StringUtils;
import org.apache.jackrabbit.commons.JcrUtils;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.settings.SlingSettingsService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.ms.wmrsicms.core.microsites.slingmodels.LandingPageModel;
import com.ms.wmrsicms.core.microsites.slingmodels.LandingPagePojo;
import com.ms.wmrsicms.core.common.Constants;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({JcrUtils.class})
public class LandingPageModelTest extends Mockito {

    @InjectMocks
    private LandingPageModel landingPageModel;

    @Mock
    private ResourceResolver resourceResolver;

    @Mock
    private SlingSettingsService slingSettingsService;

    @Mock
    private Resource rsiMainRes;

    @Mock
    private Resource childRes1;

    @Mock
    private Node jcrNode;

    @Mock
    private Resource jcrNodeRes;

    @Mock
    private ValueMap valueMap;

    private List<Resource> landingPageCards;

    @Mock
    private Resource externalCardResource;

    @Mock
    private ValueMap externalCardResMap;

    public static final String RSI_PATH = "/content/wmrsi/microsites/gio-offerings";
    public static final String MICROSITES_BLANK_TEMPLATE = "wmrsicms/components/page/micrositeblankpage";

    @Before
    public void initialize() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(JcrUtils.class);
    }

    @Test
    public void testInit() {
        try {
            // Mocking internal cards
            when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
            List<Resource> list = new ArrayList<>();
            list.add(childRes1);
            Iterator<Resource> itr = list.iterator();
            when(rsiMainRes.listChildren()).thenReturn(itr);
            when(childRes1.getValueMap()).thenReturn(valueMap);
            when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
            when(childRes1.getPath()).thenReturn("/content/wmrsi/landing-page");
            when(resourceResolver.resolve(childRes1.getPath() + "/jcr:content")).thenReturn(jcrNodeRes);
            when(jcrNodeRes.adaptTo(Node.class)).thenReturn(jcrNode);
            when(JcrUtils.getStringProperty(jcrNode, "sling:resourceType", StringUtils.EMPTY))
                .thenReturn(MICROSITES_BLANK_TEMPLATE);
            when(JcrUtils.getStringProperty(jcrNode, "isActive", "false")).thenReturn("true");
            when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY)).thenReturn("Landing Page");
            when(JcrUtils.getStringProperty(jcrNode, "linkText", "Explore Now")).thenReturn("Explore Now");
            when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY)).thenReturn("Sample description");
            when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
            when(JcrUtils.getStringProperty(jcrNode, "linkwindowtype", "blank")).thenReturn("_blank");
            when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0")).thenReturn("1");

            Set<String> runModes = new HashSet<>();
            runModes.add("author");
            when(slingSettingsService.getRunModes()).thenReturn(runModes);

            // Mocking external cards
            landingPageCards = new ArrayList<>();
            landingPageCards.add(externalCardResource);
            landingPageModel.setLandingPageCards(landingPageCards);

            when(externalCardResource.getValueMap()).thenReturn(externalCardResMap);
            when(externalCardResMap.getOrDefault("isActive", StringUtils.EMPTY)).thenReturn("true");
            when(externalCardResMap.getOrDefault("cardTitle", StringUtils.EMPTY)).thenReturn("External Card Title");
            when(externalCardResMap.getOrDefault("cardDescription", StringUtils.EMPTY)).thenReturn("External Card Description");
            when(externalCardResMap.getOrDefault("cardLink", StringUtils.EMPTY)).thenReturn("/content/external/cardLink");
            when(externalCardResMap.getOrDefault("cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img2.jpeg");
            when(externalCardResMap.getOrDefault("linkwindowtype", "blank")).thenReturn("_blank");
            when(externalCardResMap.getOrDefault("micrositeRank", "0")).thenReturn("2");
            when(externalCardResMap.getOrDefault("linkText", "Explore Now")).thenReturn("Explore Now");

            // Run the init method
            landingPageModel.init();

            // Verify sorting and microsites list population
            List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
            assertNotNull(microsites);
            assertEquals(2, microsites.size()); // One internal and one external card
            
            // Verifying properties of the first card (Internal)
            LandingPagePojo firstCard = microsites.get(0);
            assertEquals("Landing Page", firstCard.getPageTitle());
            assertEquals("Sample description", firstCard.getPageDescription());
            assertEquals("/content/dam/microsites/img1.jpeg", firstCard.getImagePath());
            assertEquals("_blank", firstCard.getLinkwindowtype());
            assertEquals(1, firstCard.getMicrositeRank());

            // Verifying properties of the second card (External)
            LandingPagePojo secondCard = microsites.get(1);
            assertEquals("External Card Title", secondCard.getPageTitle());
            assertEquals("External Card Description", secondCard.getPageDescription());
            assertEquals("/content/dam/microsites/img2.jpeg", secondCard.getImagePath());
            assertEquals("_blank", secondCard.getLinkwindowtype());
            assertEquals(2, secondCard.getMicrositeRank());

        } catch (Exception e) {
            System.out.println("Exception in LandingPageModelTest: " + e);
        }
    }
}
