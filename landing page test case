package com.ms.wmrsicms.core.mygio.services;

import com.ms.wmrsicms.core.microsites.slingmodels.LandingPageModel;
import com.ms.wmrsicms.core.microsites.slingmodels.LandingPagePojo;
import org.apache.commons.lang.StringUtils;
import org.apache.jackrabbit.commons.JcrUtils;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.settings.SlingSettingsService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import javax.jcr.Node;
import java.util.*;

import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest(JcrUtils.class)
public class LandingPageModelTest {

    @InjectMocks
    private LandingPageModel landingPageModel;

    @Mock
    private ResourceResolver resourceResolver;

    @Mock
    private SlingSettingsService slingSettingsService;

    @Mock
    private Resource rsiMainRes;

    @Mock
    private Resource childRes1;

    @Mock
    private Node jcrNode;

    @Mock
    private ValueMap valueMap;

    @Mock
    private Resource externalCardResource;

    @Mock
    private ValueMap externalCardResMap;

    private List<Resource> landingPageCards;

    private static final String RSI_PATH = "/content/wmrsi/microsites/gio-offerings";

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(JcrUtils.class);
        landingPageCards = new ArrayList<>();
    }

    @Test
    public void testInit_SuccessfulScenario() throws Exception {
        when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("cq:template", "")).thenReturn("wmrsicms/components/page/micrositeblankpage");
        
        when(rsiMainRes.listChildren()).thenReturn(Arrays.asList(childRes1).iterator());
        when(childRes1.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
        when(childRes1.getPath()).thenReturn("/content/wmrsi/landing-page");
        when(resourceResolver.resolve("/content/wmrsi/landing-page/jcr:content")).thenReturn(rsiMainRes);
        when(JcrUtils.getStringProperty(any(Node.class), eq("sling:resourceType"), eq(StringUtils.EMPTY)))
                .thenReturn("wmrsicms/components/page/micrositeblankpage");
        when(JcrUtils.getStringProperty(any(Node.class), eq("isActive"), eq("false"))).thenReturn("true");

        // Mock microsite node properties
        when(JcrUtils.getStringProperty(jcrNode, "jcr:title", StringUtils.EMPTY)).thenReturn("Landing Page");
        when(JcrUtils.getStringProperty(jcrNode, "cardDescription", StringUtils.EMPTY)).thenReturn("Sample description");
        when(JcrUtils.getStringProperty(jcrNode, "cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
        when(JcrUtils.getStringProperty(jcrNode, "linkText", "Explore Now")).thenReturn("Explore Now");
        when(JcrUtils.getStringProperty(jcrNode, "micrositeRank", "0")).thenReturn("1");

        Set<String> runModes = new HashSet<>();
        runModes.add("author");
        when(slingSettingsService.getRunModes()).thenReturn(runModes);

        landingPageModel.init();

        // Validate that microsites list was populated
        assert(!landingPageModel.getMicrosites().isEmpty());
    }

    @Test
    public void testInit_ThrowsException() throws Exception {
        // Simulate an exception in resolving resource
        when(resourceResolver.resolve(RSI_PATH)).thenThrow(new RuntimeException("Simulated exception"));

        // Initialize model
        landingPageModel.init();

        // Verify that the microsites list is empty after exception
        assert(landingPageModel.getMicrosites().isEmpty());
    }

    @Test
    public void testInit_ExternalCardsProcessing() throws Exception {
        // Setup internal cards
        when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("cq:template", "")).thenReturn("wmrsicms/components/page/micrositeblankpage");
        when(rsiMainRes.listChildren()).thenReturn(Collections.emptyIterator());

        // Setup external cards
        when(externalCardResMap.getOrDefault("isActive", StringUtils.EMPTY)).thenReturn("true");
        when(externalCardResMap.getOrDefault("cardTitle", StringUtils.EMPTY)).thenReturn("External Card Title");
        when(externalCardResMap.getOrDefault("cardDescription", StringUtils.EMPTY)).thenReturn("External Card Description");
        when(externalCardResMap.getOrDefault("cardLink", StringUtils.EMPTY)).thenReturn("https://wmrsi.webfarm-qa.ms.com/pub/content");
        when(externalCardResMap.getOrDefault("cardimage", StringUtils.EMPTY)).thenReturn("/content/dam/microsites/img1.jpeg");
        when(externalCardResMap.getOrDefault("micrositeRank", "0")).thenReturn("2");
        when(externalCardResource.getValueMap()).thenReturn(externalCardResMap);
        landingPageCards.add(externalCardResource);

        landingPageModel.setLandingPageCards(landingPageCards);

        // Initialize model
        landingPageModel.init();

        // Validate external card was processed
        List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
        assert(!microsites.isEmpty());
        assert(microsites.stream().anyMatch(card -> "External Card Title".equals(card.getPageTitle())));
    }

    @Test
    public void testInit_InvalidRankThrowsNumberFormatException() throws Exception {
        when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
        when(rsiMainRes.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("cq:template", "")).thenReturn("wmrsicms/components/page/micrositeblankpage");
        
        when(rsiMainRes.listChildren()).thenReturn(Arrays.asList(childRes1).iterator());
        when(childRes1.getValueMap()).thenReturn(valueMap);
        when(valueMap.get("jcr:primaryType", "")).thenReturn("cq:Page");
        when(childRes1.getPath()).thenReturn("/content/wmrsi/landing-page");
        when(resourceResolver.resolve("/content/wmrsi/landing-page/jcr:content")).thenReturn(rsiMainRes);
        when(JcrUtils.getStringProperty(any(Node.class), eq("sling:resourceType"), eq(StringUtils.EMPTY)))
                .thenReturn("wmrsicms/components/page/micrositeblankpage");
        when(JcrUtils.getStringProperty(any(Node.class), eq("micrositeRank"), eq("0")))
                .thenReturn("InvalidNumber");  // Simulate invalid rank

        landingPageModel.init();

        // Validate microsites list is not populated due to NumberFormatException
        assert(landingPageModel.getMicrosites().isEmpty());
    }
}
........................................

@Test
public void testInit_ResourceResolverThrowsException() throws Exception {
    // Simulate an exception when resolving the resource
    when(resourceResolver.resolve(RSI_PATH)).thenThrow(new RuntimeException("Simulated exception"));

    // Execute init method
    landingPageModel.init();

    // Validate that the microsites list remains empty after the exception
    assertTrue(landingPageModel.getMicrosites().isEmpty());
}

@Test
public void testInit_NumberFormatException() throws Exception {
    // Simulate a resource resolving successfully
    when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);

    // Simulate a child resource with invalid micrositeRank
    when(rsiMainRes.listChildren()).thenReturn(Arrays.asList(childRes1).iterator());
    when(childRes1.getValueMap()).thenReturn(valueMap);
    when(valueMap.get("micrositeRank")).thenReturn("invalid-number");

    // Execute init method
    landingPageModel.init();

    // Validate microsites list is empty after a NumberFormatException
    assertTrue(landingPageModel.getMicrosites().isEmpty());
}
....................................
@Test
public void testInit_InactiveResource() throws Exception {
    // Simulate a resource resolving successfully
    when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);

    // Simulate inactive resource (isActive == false)
    when(valueMap.get("isActive", "false")).thenReturn("false");

    // Execute init method
    landingPageModel.init();

    // Validate microsites list remains empty since the resource is inactive
    assertTrue(landingPageModel.getMicrosites().isEmpty());
}

@Test
public void testInit_ActiveResource() throws Exception {
    // Simulate a resource resolving successfully
    when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);

    // Simulate active resource (isActive == true)
    when(valueMap.get("isActive", "false")).thenReturn("true");

    // Execute init method
    landingPageModel.init();

    // Validate microsites list is populated
    assertFalse(landingPageModel.getMicrosites().isEmpty());
}
........................
@Test
public void testSortMicrositesByRank() throws Exception {
    // Simulate resources with different ranks
    when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);
    
    when(rsiMainRes.listChildren()).thenReturn(Arrays.asList(childRes1, childRes2).iterator());
    
    when(childRes1.getValueMap()).thenReturn(valueMap);
    when(valueMap.get("micrositeRank")).thenReturn("1");
    
    when(childRes2.getValueMap()).thenReturn(valueMap);
    when(valueMap.get("micrositeRank")).thenReturn("2");

    // Execute init method
    landingPageModel.init();

    // Validate microsites are sorted by rank
    List<LandingPagePojo> microsites = landingPageModel.getMicrosites();
    assertEquals("1", microsites.get(0).getMicrositeRank());
    assertEquals("2", microsites.get(1).getMicrositeRank());
}

@Test
public void testSortMicrositesInvalidRank() throws Exception {
    // Simulate a resource with an invalid rank (non-numeric)
    when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);
    
    when(rsiMainRes.listChildren()).thenReturn(Arrays.asList(childRes1).iterator());
    when(childRes1.getValueMap()).thenReturn(valueMap);
    when(valueMap.get("micrositeRank")).thenReturn("invalid-rank");

    // Execute init method
    landingPageModel.init();

    // Validate that the microsites list remains empty
    assertTrue(landingPageModel.getMicrosites().isEmpty());
}
...........................................
@Test
public void testInit_RunModeAuthor() throws Exception {
    Set<String> runModes = new HashSet<>();
    runModes.add("author");
    when(slingSettingsService.getRunModes()).thenReturn(runModes);

    // Proceed with the rest of the test setup

    // Validate microsites are processed correctly in author mode
    landingPageModel.init();
    assertFalse(landingPageModel.getMicrosites().isEmpty());
}

@Test
public void testInit_RunModePublish() throws Exception {
    Set<String> runModes = new HashSet<>();
    runModes.add("publish");
    when(slingSettingsService.getRunModes()).thenReturn(runModes);

    // Proceed with the rest of the test setup

    // Validate microsites are processed correctly in publish mode
    landingPageModel.init();
    assertFalse(landingPageModel.getMicrosites().isEmpty());
}
..........................

@Test
public void testInit_NoChildren() throws Exception {
    // Simulate a resource with no child resources
    when(resourceResolver.resolve(RSI_PATH)).thenReturn(rsiMainRes);
    when(rsiMainRes.getValueMap()).thenReturn(valueMap);
    
    when(rsiMainRes.listChildren()).thenReturn(Collections.emptyIterator());

    // Execute init method
    landingPageModel.init();

    // Validate microsites list is empty
    assertTrue(landingPageModel.getMicrosites().isEmpty());
}

