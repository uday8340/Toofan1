package com.adobe.aem.aemtraining.core.models;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;

@Model(adaptables = Resource.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class Contactus2 {

    @ValueMapValue
    private String heading;

    public String getHeading() {
        return heading;
    }
}





package com.adobe.aem.aemtraining.core.models;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.models.annotations.Default;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;

@Model(adaptables = Resource.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class Contactus {

    @ValueMapValue
    @Default(values = "Heading")
    private String name;

    @ValueMapValue
    private String number;

    public String getName() {
        return name;
    }

    public String getNumber() {
        return number;
    }
}






package com.adobe.aem.aemtraining.core.models;

import javax.inject.Inject;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.models.annotations.Default;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.Via;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;
import java.util.List;

@Model(adaptables = SlingHttpServletRequest.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class ContactModel {

    @ValueMapValue
    @Default(values = "heading")
    private String heading;

    @ValueMapValue
    @Default(values = "name")
    private String name;

    @ValueMapValue
    private String number;

    @Inject
    @Via("resource")
    private List<Contactus> contacts;

    public String getHeading() {
        return heading;
    }

    public String getName() {
        return name;
    }

    public String getNumber() {
        return number;
    }

    public List<Contactus> getContacts() {
        return contacts;
    }
}

<!-- Contact Us Component HTML -->
<sly data-sly-use.contactUsModel="com.yourproject.core.models.ContactUsModel">
    <div class="contact-us-component">
        <!-- Heading -->
        <h2 class="contact-us-heading">${contactUsModel.heading @ context='text'}</h2>
 
        <!-- Contact List -->
        <div class="contact-list">
            <sly data-sly-list.contacts="${contactUsModel.contactlist}">
                <div class="contact-item">
                    <h3 class="contact-item-heading">${contacts.analystName @ context='text'}</h3>
                    <p class="contact-item-detail">
                        <strong>Profile:</strong>
                        <a href="${contacts.analystProfileUrl @ context='uri'}" target="_blank">${contacts.analystProfileUrl @ context='text'}</a>
                    </p>
                    <p class="contact-item-detail">
                        <strong>Email:</strong>
                        <a href="mailto:${contacts.analystEmail @ context='email'}">${contacts.analystEmail @ context='text'}</a>
                    </p>
                    <p class="contact-item-detail">
                        <strong>Phone:</strong>
                        <a href="tel:${contacts.analystNumber @ context='phone'}">${contacts.analystNumber @ context='text'}</a>
                    </p>
                </div>
            </sly>
        </div>
    </div>
 
    <!-- Layout Check (Optional) -->
    <sly>
        <div class="layout-${contactUsModel.contactlist[0].layout @ context='text'}">
            <!-- You can apply different styles or layouts based on this field's value -->
            <!-- Example:
            <sly data-sly-test="${contactUsModel.contactlist[0].layout == 'Horizontal'}">
                <p>Horizontal Layout Applied</p>
            </sly>
            -->
        </div>
    </sly>
</sly>
has context menu


<sly data-sly-use.contactUsModel="com.adobe.aem.aemtraining.core.models.ContactUsModel">
    <div class="contact-us-component">
        <!-- Heading -->
        <h2 class="contact-us-heading">${contactUsModel.heading @ context='text'}</h2>

        <!-- Contact List -->
        <div class="contact-list">
            <sly data-sly-list.contacts="${contactUsModel.contactlist}">
                <div class="contact-item">
                    <h3 class="contact-item-heading">${contacts.analystName @ context='text'}</h3>
                    <h3 class="contact-item-heading">${contacts.msid @ context='text'}</h3>
                </div>
            </sly>
        </div>
    </div>
</sly>

