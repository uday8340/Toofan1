package com.example.models;

import com.adobe.cq.export.json.ComponentExporter;
import com.adobe.cq.export.json.ExporterConstants;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Exporter;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.ChildResource;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.annotation.PostConstruct;
import java.util.Iterator;

@Model(
    adaptables = Resource.class,
    adapters = {ResourcesModel.class, ComponentExporter.class},
    resourceType = "wealthbookcms/components/resources",
    defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL
)
@Exporter(name = ExporterConstants.SLING_MODEL_EXPORTER_NAME, extensions = ExporterConstants.SLING_MODEL_EXTENSION)
public class ResourcesModel implements ComponentExporter {

    private static final Logger log = LoggerFactory.getLogger(ResourcesModel.class);

    @ValueMapValue
    @JsonProperty("heading")
    private String heading;

    @ValueMapValue
    @JsonProperty("title")
    private String title;

    @ValueMapValue
    @JsonProperty("resourcesDescription")
    private String resourcesDescription;

    @ChildResource(name = "resourcelinks")
    private Resource resourcelinks;

    private String jsonFormat;

    @PostConstruct
    protected void init() {
        log.info("Initializing ResourcesModel...");

        JsonObject jsonObject = new JsonObject();
        jsonObject.addProperty("heading", heading);
        jsonObject.addProperty("title", title);
        jsonObject.addProperty("resourcesDescription", resourcesDescription);

        // Convert multifield resourcelinks into JSON array
        JsonArray resourcesArray = new JsonArray();
        if (resourcelinks != null) {
            Iterator<Resource> resourceIterator = resourcelinks.getChildren().iterator();
            while (resourceIterator.hasNext()) {
                Resource resourceItem = resourceIterator.next();
                ValueMap valueMap = resourceItem.getValueMap();

                JsonObject resourceObject = new JsonObject();
                resourceObject.addProperty("resourceTitle", valueMap.get("resourceTitle", ""));
                resourceObject.addProperty("linkUrl", valueMap.get("linkUrl", ""));
                resourceObject.addProperty("linkWindowType", valueMap.get("linkWindowType", ""));
                resourceObject.addProperty("isExternal", valueMap.get("isExternal", Boolean.FALSE));

                resourcesArray.add(resourceObject);
            }
        }
        jsonObject.add("resourcelinks", resourcesArray);

        // Store as JSON String
        jsonFormat = jsonObject.toString();

        log.info("Generated JSON: {}", jsonFormat);
    }

    @JsonProperty("jsonFormat")
    public String getJsonFormat() {
        return jsonFormat;
    }

    @Override
    public String getExportedType() {
        return "wealthbookcms/components/resources";
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import org.apache.commons.text.StringEscapeUtils; // Import this

@PostConstruct
protected void init() {
    log.info("Initializing ResourcesModel...");

    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("heading", heading);
    jsonObject.addProperty("title", title);

    // Decode HTML-encoded characters in resourcesDescription
    String decodedDescription = StringEscapeUtils.unescapeHtml4(resourcesDescription);
    jsonObject.addProperty("resourcesDescription", decodedDescription);

    JsonArray resourcesArray = new JsonArray();
    if (resourcelinks != null) {
        Iterator<Resource> resourceIterator = resourcelinks.getChildren().iterator();
        while (resourceIterator.hasNext()) {
            Resource resourceItem = resourceIterator.next();
            ValueMap valueMap = resourceItem.getValueMap();

            JsonObject resourceObject = new JsonObject();
            resourceObject.addProperty("resourceTitle", valueMap.get("resourceTitle", ""));
            resourceObject.addProperty("linkUrl", valueMap.get("linkUrl", ""));
            resourceObject.addProperty("linkWindowType", valueMap.get("linkWindowType", ""));
            resourceObject.addProperty("isExternal", valueMap.get("isExternal", Boolean.FALSE));

            resourcesArray.add(resourceObject);
        }
    }
    jsonObject.add("resourcelinks", resourcesArray);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    jsonFormat = gson.toJson(jsonObject);

    log.info("Generated JSON: {}", jsonFormat);
}
,..............................

test class

package com.example.models;

import com.google.gson.JsonObject;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.*;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class ResourcesModelTest {

    @InjectMocks
    private ResourcesModel resourcesModel;

    @Mock
    private Resource resourcelinks;

    @Mock
    private Resource childResource1;

    @Mock
    private Resource childResource2;

    @Mock
    private ValueMap valueMap1;

    @Mock
    private ValueMap valueMap2;

    @Before
    public void setUp() {
        resourcesModel = new ResourcesModel();
        injectPrivateField(resourcesModel, "heading", "Sample Heading");
        injectPrivateField(resourcesModel, "title", "Sample Title");
        injectPrivateField(resourcesModel, "resourcesDescription", "Sample Description");
    }

    @Test
    public void testInitWithResourcelinks() {
        injectPrivateField(resourcesModel, "resourcelinks", resourcelinks);

        List<Resource> children = Arrays.asList(childResource1, childResource2);
        when(resourcelinks.getChildren()).thenReturn(children);

        when(childResource1.getValueMap()).thenReturn(valueMap1);
        when(valueMap1.get("resourceTitle", "")).thenReturn("Resource 1");
        when(valueMap1.get("linkUrl", "")).thenReturn("/link1");
        when(valueMap1.get("linkWindowType", "")).thenReturn("new");
        when(valueMap1.get("isExternal", Boolean.FALSE)).thenReturn(true);

        when(childResource2.getValueMap()).thenReturn(valueMap2);
        when(valueMap2.get("resourceTitle", "")).thenReturn("Resource 2");
        when(valueMap2.get("linkUrl", "")).thenReturn("/link2");
        when(valueMap2.get("linkWindowType", "")).thenReturn("same");
        when(valueMap2.get("isExternal", Boolean.FALSE)).thenReturn(false);

        resourcesModel.init();
        String jsonOutput = resourcesModel.getJsonFormat();
        JsonObject parsed = com.google.gson.JsonParser.parseString(jsonOutput).getAsJsonObject();

        assertEquals("Sample Heading", parsed.get("heading").getAsString());
        assertEquals("Sample Title", parsed.get("title").getAsString());
        assertEquals("Sample Description", parsed.get("resourcesDescription").getAsString());
        assertEquals(2, parsed.getAsJsonArray("resourcelinks").size());
    }

    @Test
    public void testInitWithoutResourcelinks() {
        injectPrivateField(resourcesModel, "resourcelinks", null);

        resourcesModel.init();

        String jsonOutput = resourcesModel.getJsonFormat();
        JsonObject parsed = com.google.gson.JsonParser.parseString(jsonOutput).getAsJsonObject();

        assertEquals("Sample Heading", parsed.get("heading").getAsString());
        assertEquals("Sample Title", parsed.get("title").getAsString());
        assertEquals("Sample Description", parsed.get("resourcesDescription").getAsString());
        assertEquals(0, parsed.getAsJsonArray("resourcelinks").size());
    }

    @Test
    public void testGetExportedType() {
        assertEquals("wealthbookcms/components/resources", resourcesModel.getExportedType());
    }

    // Utility method for injecting private fields via reflection
    private void injectPrivateField(Object target, String fieldName, Object value) {
        try {
            java.lang.reflect.Field field = target.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(target, value);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
