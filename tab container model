package com.example.models;

import org.apache.sling.api.resource.Resource;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.ChildResource;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.PostConstruct;
import java.util.List;
import java.util.stream.Collectors;

@Model(adaptables = Resource.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class TabColumnContainer {

    private static final Logger LOG = LoggerFactory.getLogger(TabColumnContainer.class);

    @ValueMapValue
    private String title;

    @ChildResource
    private List<Tab> tabs;

    @PostConstruct
    protected void init() {
        // Log the initialization process
        LOG.info("Initializing TabColumnContainer");

        // Set a default title if none is provided
        if (title == null || title.isEmpty()) {
            title = "Default Tab Column Container Title";
            LOG.info("Title was not provided, setting default title: {}", title);
        }

        // Filter out any null tabs
        if (tabs != null) {
            tabs = tabs.stream()
                       .filter(tab -> tab != null && tab.getTitle() != null && !tab.getTitle().isEmpty())
                       .collect(Collectors.toList());
            LOG.info("Filtered tabs, remaining count: {}", tabs.size());
        } else {
            LOG.warn("Tabs resource is null");
        }
    }

    public String getTitle() {
        return title;
    }

    public List<Tab> getTabs() {
        return tabs;
    }

    @Model(adaptables = Resource.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
    public static class Tab {

        @ValueMapValue
        private String title;

        @ChildResource
        private List<Report> tabDetails;

        public String getTitle() {
            return title;
        }

        public List<Report> getTabDetails() {
            return tabDetails;
        }
    }

    @Model(adaptables = Resource.class, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
    public static class Report {

        @ValueMapValue
        private String reportId;

        @ValueMapValue
        private String linkTitle;

        @ValueMapValue
        private String linkUrl;

        @ValueMapValue
        private boolean isTheLinkExternal;

        public String getReportId() {
            return reportId;
        }

        public String getLinkTitle() {
            return linkTitle;
        }

        public String getLinkUrl() {
            return linkUrl;
        }

        public boolean isTheLinkExternal() {
            return isTheLinkExternal;
        }
    }
}
